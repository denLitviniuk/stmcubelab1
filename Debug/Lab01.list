
Lab01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002aa4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08002c44  08002c44  00012c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d9c  08002d9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002d9c  08002d9c  00012d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002da4  08002da4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002da4  08002da4  00012da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002da8  08002da8  00012da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000070  08002e1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08002e1c  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004366  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001113  00000000  00000000  00024406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004d0  00000000  00000000  00025520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000428  00000000  00000000  000259f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015bab  00000000  00000000  00025e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000593b  00000000  00000000  0003b9c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083873  00000000  00000000  000412fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c4b71  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b80  00000000  00000000  000c4bc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000c6744  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000004e  00000000  00000000  000c6768  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002c2c 	.word	0x08002c2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08002c2c 	.word	0x08002c2c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 facf 	bl	8000b2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f893 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8fd 	bl	8000790 <MX_GPIO_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000596:	f000 f8ef 	bl	8000778 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(LED8_GPIO_Port, LED8_Pin) == GPIO_PIN_SET)
 800059a:	2101      	movs	r1, #1
 800059c:	4827      	ldr	r0, [pc, #156]	; (800063c <main+0xb8>)
 800059e:	f000 fdf1 	bl	8001184 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d103      	bne.n	80005b0 <main+0x2c>
	  {
		  HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4824      	ldr	r0, [pc, #144]	; (800063c <main+0xb8>)
 80005ac:	f000 fe1b 	bl	80011e6 <HAL_GPIO_TogglePin>
	  }
	  if (HAL_GPIO_ReadPin(LED9_GPIO_Port, LED9_Pin) == GPIO_PIN_SET)
 80005b0:	2102      	movs	r1, #2
 80005b2:	4822      	ldr	r0, [pc, #136]	; (800063c <main+0xb8>)
 80005b4:	f000 fde6 	bl	8001184 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b01      	cmp	r3, #1
 80005bc:	d103      	bne.n	80005c6 <main+0x42>
	  	  {
	  		  HAL_GPIO_TogglePin(LED9_GPIO_Port, LED9_Pin);
 80005be:	2102      	movs	r1, #2
 80005c0:	481e      	ldr	r0, [pc, #120]	; (800063c <main+0xb8>)
 80005c2:	f000 fe10 	bl	80011e6 <HAL_GPIO_TogglePin>
	  	  }
	  // Ініціалізуємо генератор випадкових чисел з поточним часом як насіння
	   srand(time(NULL));
 80005c6:	2000      	movs	r0, #0
 80005c8:	f001 fb02 	bl	8001bd0 <time>
 80005cc:	4602      	mov	r2, r0
 80005ce:	460b      	mov	r3, r1
 80005d0:	4613      	mov	r3, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fa90 	bl	8001af8 <srand>
	  // Генеруємо випадкове число в діапазоні від 5 до 10 секунд
	   int delay_time = (rand() % 6) + 2;
 80005d8:	f001 fabc 	bl	8001b54 <rand>
 80005dc:	4601      	mov	r1, r0
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <main+0xbc>)
 80005e0:	fb83 3201 	smull	r3, r2, r3, r1
 80005e4:	17cb      	asrs	r3, r1, #31
 80005e6:	1ad2      	subs	r2, r2, r3
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	1aca      	subs	r2, r1, r3
 80005f2:	1c93      	adds	r3, r2, #2
 80005f4:	607b      	str	r3, [r7, #4]
	   HAL_Delay(1000 * delay_time);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fb05 	bl	8000c10 <HAL_Delay>
	   	HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0xc0>)
 800060c:	f000 fdeb 	bl	80011e6 <HAL_GPIO_TogglePin>

	   if (HAL_GPIO_ReadPin(BT8_GPIO_Port, BT8_Pin) == GPIO_PIN_RESET  ) {
 8000610:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000614:	4809      	ldr	r0, [pc, #36]	; (800063c <main+0xb8>)
 8000616:	f000 fdb5 	bl	8001184 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d1bc      	bne.n	800059a <main+0x16>
	           // Якщо пін знаходиться в стані "низький" (натиснуто кнопку)
	           // то виконується дія, наприклад, виведення повідомлення на дисплей
	           // Очікуємо, поки кнопку відпустять
	           while (HAL_GPIO_ReadPin(BT8_GPIO_Port,BT8_Pin) == GPIO_PIN_RESET);
 8000620:	bf00      	nop
 8000622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <main+0xb8>)
 8000628:	f000 fdac 	bl	8001184 <HAL_GPIO_ReadPin>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d0f7      	beq.n	8000622 <main+0x9e>
	           HAL_Delay(3000);
 8000632:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000636:	f000 faeb 	bl	8000c10 <HAL_Delay>
  {
 800063a:	e7ae      	b.n	800059a <main+0x16>
 800063c:	40020000 	.word	0x40020000
 8000640:	2aaaaaab 	.word	0x2aaaaaab
 8000644:	40020800 	.word	0x40020800

08000648 <HAL_GPIO_EXTI_Callback>:
		  /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BT8_Pin) {
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000658:	d110      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0x34>
		if (HAL_GPIO_ReadPin(LED13_GPIO_Port, LED13_Pin) == GPIO_PIN_SET)
 800065a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065e:	4814      	ldr	r0, [pc, #80]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000660:	f000 fd90 	bl	8001184 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b01      	cmp	r3, #1
 8000668:	d108      	bne.n	800067c <HAL_GPIO_EXTI_Callback+0x34>
		{HAL_GPIO_TogglePin(LED8_GPIO_Port, LED8_Pin);
 800066a:	2101      	movs	r1, #1
 800066c:	4811      	ldr	r0, [pc, #68]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x6c>)
 800066e:	f000 fdba 	bl	80011e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 8000672:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000676:	480e      	ldr	r0, [pc, #56]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000678:	f000 fdb5 	bl	80011e6 <HAL_GPIO_TogglePin>
		}
	}
	if (GPIO_Pin == BT9_Pin ) {
 800067c:	88fb      	ldrh	r3, [r7, #6]
 800067e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000682:	d110      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0x5e>
		if (HAL_GPIO_ReadPin(LED13_GPIO_Port, LED13_Pin) == GPIO_PIN_SET)
 8000684:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000688:	4809      	ldr	r0, [pc, #36]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x68>)
 800068a:	f000 fd7b 	bl	8001184 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b01      	cmp	r3, #1
 8000692:	d108      	bne.n	80006a6 <HAL_GPIO_EXTI_Callback+0x5e>
		{
		HAL_GPIO_TogglePin(LED9_GPIO_Port, LED9_Pin);
 8000694:	2102      	movs	r1, #2
 8000696:	4807      	ldr	r0, [pc, #28]	; (80006b4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000698:	f000 fda5 	bl	80011e6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED13_GPIO_Port, LED13_Pin);
 800069c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006a0:	4803      	ldr	r0, [pc, #12]	; (80006b0 <HAL_GPIO_EXTI_Callback+0x68>)
 80006a2:	f000 fda0 	bl	80011e6 <HAL_GPIO_TogglePin>
		}
	}
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020800 	.word	0x40020800
 80006b4:	40020000 	.word	0x40020000

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	; 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 0320 	add.w	r3, r7, #32
 80006c2:	2230      	movs	r2, #48	; 0x30
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fa0e 	bl	8001ae8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	4b23      	ldr	r3, [pc, #140]	; (8000770 <SystemClock_Config+0xb8>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xb8>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	; 0x40
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xb8>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f4:	60bb      	str	r3, [r7, #8]
 80006f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006f8:	2300      	movs	r3, #0
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <SystemClock_Config+0xbc>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <SystemClock_Config+0xbc>)
 8000706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800070a:	6013      	str	r3, [r2, #0]
 800070c:	4b19      	ldr	r3, [pc, #100]	; (8000774 <SystemClock_Config+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071c:	2301      	movs	r3, #1
 800071e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2310      	movs	r3, #16
 8000722:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000724:	2300      	movs	r3, #0
 8000726:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0320 	add.w	r3, r7, #32
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fd8d 	bl	800124c <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000738:	f000 f892 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2100      	movs	r1, #0
 8000756:	4618      	mov	r0, r3
 8000758:	f000 fff0 	bl	800173c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000762:	f000 f87d 	bl	8000860 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3750      	adds	r7, #80	; 0x50
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800
 8000774:	40007000 	.word	0x40007000

08000778 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* EXTI9_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 10, 0);
 800077c:	2200      	movs	r2, #0
 800077e:	210a      	movs	r1, #10
 8000780:	2017      	movs	r0, #23
 8000782:	f000 fb44 	bl	8000e0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000786:	2017      	movs	r0, #23
 8000788:	f000 fb5d 	bl	8000e46 <HAL_NVIC_EnableIRQ>
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b088      	sub	sp, #32
 8000794:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a29      	ldr	r2, [pc, #164]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007b0:	f043 0304 	orr.w	r3, r3, #4
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0304 	and.w	r3, r3, #4
 80007be:	60bb      	str	r3, [r7, #8]
 80007c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a22      	ldr	r2, [pc, #136]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <MX_GPIO_Init+0xc4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	607b      	str	r3, [r7, #4]
 80007dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED13_GPIO_Port, LED13_Pin, GPIO_PIN_RESET);
 80007de:	2200      	movs	r2, #0
 80007e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e4:	481c      	ldr	r0, [pc, #112]	; (8000858 <MX_GPIO_Init+0xc8>)
 80007e6:	f000 fce5 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED8_Pin|LED9_Pin, GPIO_PIN_RESET);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2103      	movs	r1, #3
 80007ee:	481b      	ldr	r0, [pc, #108]	; (800085c <MX_GPIO_Init+0xcc>)
 80007f0:	f000 fce0 	bl	80011b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED13_Pin */
  GPIO_InitStruct.Pin = LED13_Pin;
 80007f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED13_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 030c 	add.w	r3, r7, #12
 800080a:	4619      	mov	r1, r3
 800080c:	4812      	ldr	r0, [pc, #72]	; (8000858 <MX_GPIO_Init+0xc8>)
 800080e:	f000 fb35 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED8_Pin LED9_Pin */
  GPIO_InitStruct.Pin = LED8_Pin|LED9_Pin;
 8000812:	2303      	movs	r3, #3
 8000814:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	4619      	mov	r1, r3
 8000828:	480c      	ldr	r0, [pc, #48]	; (800085c <MX_GPIO_Init+0xcc>)
 800082a:	f000 fb27 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : BT8_Pin BT9_Pin */
  GPIO_InitStruct.Pin = BT8_Pin|BT9_Pin;
 800082e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000834:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000838:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <MX_GPIO_Init+0xcc>)
 8000846:	f000 fb19 	bl	8000e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020800 	.word	0x40020800
 800085c:	40020000 	.word	0x40020000

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	e7fe      	b.n	8000868 <Error_Handler+0x8>
	...

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	607b      	str	r3, [r7, #4]
 8000876:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_MspInit+0x4c>)
 8000878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087a:	4a0f      	ldr	r2, [pc, #60]	; (80008b8 <HAL_MspInit+0x4c>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000880:	6453      	str	r3, [r2, #68]	; 0x44
 8000882:	4b0d      	ldr	r3, [pc, #52]	; (80008b8 <HAL_MspInit+0x4c>)
 8000884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000886:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_MspInit+0x4c>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_MspInit+0x4c>)
 8000898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
 800089e:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_MspInit+0x4c>)
 80008a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008a6:	603b      	str	r3, [r7, #0]
 80008a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	370c      	adds	r7, #12
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800

080008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <NMI_Handler+0x4>

080008c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <HardFault_Handler+0x4>

080008c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <MemManage_Handler+0x4>

080008ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <BusFault_Handler+0x4>

080008d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <UsageFault_Handler+0x4>

080008da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008de:	bf00      	nop
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr

080008e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000908:	f000 f962 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	bd80      	pop	{r7, pc}

08000910 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT8_Pin);
 8000914:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000918:	f000 fc80 	bl	800121c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BT9_Pin);
 800091c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000920:	f000 fc7c 	bl	800121c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	bd80      	pop	{r7, pc}

08000928 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return 1;
 800092c:	2301      	movs	r3, #1
}
 800092e:	4618      	mov	r0, r3
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <_kill>:

int _kill(int pid, int sig)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000942:	f001 f8a7 	bl	8001a94 <__errno>
 8000946:	4603      	mov	r3, r0
 8000948:	2216      	movs	r2, #22
 800094a:	601a      	str	r2, [r3, #0]
  return -1;
 800094c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000950:	4618      	mov	r0, r3
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <_exit>:

void _exit (int status)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000960:	f04f 31ff 	mov.w	r1, #4294967295
 8000964:	6878      	ldr	r0, [r7, #4]
 8000966:	f7ff ffe7 	bl	8000938 <_kill>
  while (1) {}    /* Make sure we hang here */
 800096a:	e7fe      	b.n	800096a <_exit+0x12>

0800096c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
  }

  return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	60f8      	str	r0, [r7, #12]
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
 80009b6:	e009      	b.n	80009cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	1c5a      	adds	r2, r3, #1
 80009bc:	60ba      	str	r2, [r7, #8]
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4618      	mov	r0, r3
 80009c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	3301      	adds	r3, #1
 80009ca:	617b      	str	r3, [r7, #20]
 80009cc:	697a      	ldr	r2, [r7, #20]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	dbf1      	blt.n	80009b8 <_write+0x12>
  }
  return len;
 80009d4:	687b      	ldr	r3, [r7, #4]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <_close>:

int _close(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b083      	sub	sp, #12
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a06:	605a      	str	r2, [r3, #4]
  return 0;
 8000a08:	2300      	movs	r3, #0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <_isatty>:

int _isatty(int file)
{
 8000a16:	b480      	push	{r7}
 8000a18:	b083      	sub	sp, #12
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a1e:	2301      	movs	r3, #1
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	60f8      	str	r0, [r7, #12]
 8000a34:	60b9      	str	r1, [r7, #8]
 8000a36:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
	...

08000a48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a50:	4a14      	ldr	r2, [pc, #80]	; (8000aa4 <_sbrk+0x5c>)
 8000a52:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <_sbrk+0x60>)
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <_sbrk+0x64>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d102      	bne.n	8000a6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a64:	4b11      	ldr	r3, [pc, #68]	; (8000aac <_sbrk+0x64>)
 8000a66:	4a12      	ldr	r2, [pc, #72]	; (8000ab0 <_sbrk+0x68>)
 8000a68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a6a:	4b10      	ldr	r3, [pc, #64]	; (8000aac <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	d207      	bcs.n	8000a88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a78:	f001 f80c 	bl	8001a94 <__errno>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	220c      	movs	r2, #12
 8000a80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
 8000a86:	e009      	b.n	8000a9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a88:	4b08      	ldr	r3, [pc, #32]	; (8000aac <_sbrk+0x64>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a8e:	4b07      	ldr	r3, [pc, #28]	; (8000aac <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a05      	ldr	r2, [pc, #20]	; (8000aac <_sbrk+0x64>)
 8000a98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3718      	adds	r7, #24
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20010000 	.word	0x20010000
 8000aa8:	00000400 	.word	0x00000400
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	200000a8 	.word	0x200000a8

08000ab4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <SystemInit+0x20>)
 8000aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000abe:	4a05      	ldr	r2, [pc, #20]	; (8000ad4 <SystemInit+0x20>)
 8000ac0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ad8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000adc:	480d      	ldr	r0, [pc, #52]	; (8000b14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ade:	490e      	ldr	r1, [pc, #56]	; (8000b18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ae0:	4a0e      	ldr	r2, [pc, #56]	; (8000b1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0b      	ldr	r2, [pc, #44]	; (8000b20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000af4:	4c0b      	ldr	r4, [pc, #44]	; (8000b24 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b02:	f7ff ffd7 	bl	8000ab4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b06:	f000 ffcb 	bl	8001aa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b0a:	f7ff fd3b 	bl	8000584 <main>
  bx  lr    
 8000b0e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b10:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b1c:	08002dac 	.word	0x08002dac
  ldr r2, =_sbss
 8000b20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b24:	200000a4 	.word	0x200000a4

08000b28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b28:	e7fe      	b.n	8000b28 <ADC_IRQHandler>
	...

08000b2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b30:	4b0e      	ldr	r3, [pc, #56]	; (8000b6c <HAL_Init+0x40>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a0d      	ldr	r2, [pc, #52]	; (8000b6c <HAL_Init+0x40>)
 8000b36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b3c:	4b0b      	ldr	r3, [pc, #44]	; (8000b6c <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <HAL_Init+0x40>)
 8000b42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	4b08      	ldr	r3, [pc, #32]	; (8000b6c <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_Init+0x40>)
 8000b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b54:	2003      	movs	r0, #3
 8000b56:	f000 f94f 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b5a:	200f      	movs	r0, #15
 8000b5c:	f000 f808 	bl	8000b70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b60:	f7ff fe84 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023c00 	.word	0x40023c00

08000b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <HAL_InitTick+0x54>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <HAL_InitTick+0x58>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	4619      	mov	r1, r3
 8000b82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 f967 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00e      	b.n	8000bbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d80a      	bhi.n	8000bba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	6879      	ldr	r1, [r7, #4]
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f92f 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4a06      	ldr	r2, [pc, #24]	; (8000bcc <HAL_InitTick+0x5c>)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	e000      	b.n	8000bbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20000000 	.word	0x20000000
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000090 	.word	0x20000090

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000090 	.word	0x20000090

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b089      	sub	sp, #36	; 0x24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e92:	2300      	movs	r3, #0
 8000e94:	61fb      	str	r3, [r7, #28]
 8000e96:	e159      	b.n	800114c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	697a      	ldr	r2, [r7, #20]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8148 	bne.w	8001146 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	f003 0303 	and.w	r3, r3, #3
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d005      	beq.n	8000ece <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d130      	bne.n	8000f30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	2203      	movs	r2, #3
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	091b      	lsrs	r3, r3, #4
 8000f1a:	f003 0201 	and.w	r2, r3, #1
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f003 0303 	and.w	r3, r3, #3
 8000f38:	2b03      	cmp	r3, #3
 8000f3a:	d017      	beq.n	8000f6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689a      	ldr	r2, [r3, #8]
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b02      	cmp	r3, #2
 8000f76:	d123      	bne.n	8000fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	08da      	lsrs	r2, r3, #3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3208      	adds	r2, #8
 8000f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	f003 0307 	and.w	r3, r3, #7
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	08da      	lsrs	r2, r3, #3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3208      	adds	r2, #8
 8000fba:	69b9      	ldr	r1, [r7, #24]
 8000fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	005b      	lsls	r3, r3, #1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0203 	and.w	r2, r3, #3
 8000fe0:	69fb      	ldr	r3, [r7, #28]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 80a2 	beq.w	8001146 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b57      	ldr	r3, [pc, #348]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	4a56      	ldr	r2, [pc, #344]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 800100c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001010:	6453      	str	r3, [r2, #68]	; 0x44
 8001012:	4b54      	ldr	r3, [pc, #336]	; (8001164 <HAL_GPIO_Init+0x2e8>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101e:	4a52      	ldr	r2, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	f003 0303 	and.w	r3, r3, #3
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	220f      	movs	r2, #15
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a49      	ldr	r2, [pc, #292]	; (800116c <HAL_GPIO_Init+0x2f0>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d019      	beq.n	800107e <HAL_GPIO_Init+0x202>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a48      	ldr	r2, [pc, #288]	; (8001170 <HAL_GPIO_Init+0x2f4>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d013      	beq.n	800107a <HAL_GPIO_Init+0x1fe>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a47      	ldr	r2, [pc, #284]	; (8001174 <HAL_GPIO_Init+0x2f8>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d00d      	beq.n	8001076 <HAL_GPIO_Init+0x1fa>
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d007      	beq.n	8001072 <HAL_GPIO_Init+0x1f6>
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4a45      	ldr	r2, [pc, #276]	; (800117c <HAL_GPIO_Init+0x300>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d101      	bne.n	800106e <HAL_GPIO_Init+0x1f2>
 800106a:	2304      	movs	r3, #4
 800106c:	e008      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800106e:	2307      	movs	r3, #7
 8001070:	e006      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001072:	2303      	movs	r3, #3
 8001074:	e004      	b.n	8001080 <HAL_GPIO_Init+0x204>
 8001076:	2302      	movs	r3, #2
 8001078:	e002      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <HAL_GPIO_Init+0x204>
 800107e:	2300      	movs	r3, #0
 8001080:	69fa      	ldr	r2, [r7, #28]
 8001082:	f002 0203 	and.w	r2, r2, #3
 8001086:	0092      	lsls	r2, r2, #2
 8001088:	4093      	lsls	r3, r2
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4313      	orrs	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001090:	4935      	ldr	r1, [pc, #212]	; (8001168 <HAL_GPIO_Init+0x2ec>)
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	089b      	lsrs	r3, r3, #2
 8001096:	3302      	adds	r3, #2
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800109e:	4b38      	ldr	r3, [pc, #224]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	43db      	mvns	r3, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4013      	ands	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d003      	beq.n	80010c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c2:	4a2f      	ldr	r2, [pc, #188]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010c8:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d003      	beq.n	80010ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010ec:	4a24      	ldr	r2, [pc, #144]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010ee:	69bb      	ldr	r3, [r7, #24]
 80010f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <HAL_GPIO_Init+0x304>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001116:	4a1a      	ldr	r2, [pc, #104]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800111c:	4b18      	ldr	r3, [pc, #96]	; (8001180 <HAL_GPIO_Init+0x304>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001140:	4a0f      	ldr	r2, [pc, #60]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	3301      	adds	r3, #1
 800114a:	61fb      	str	r3, [r7, #28]
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	2b0f      	cmp	r3, #15
 8001150:	f67f aea2 	bls.w	8000e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001154:	bf00      	nop
 8001156:	bf00      	nop
 8001158:	3724      	adds	r7, #36	; 0x24
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40013800 	.word	0x40013800
 800116c:	40020000 	.word	0x40020000
 8001170:	40020400 	.word	0x40020400
 8001174:	40020800 	.word	0x40020800
 8001178:	40020c00 	.word	0x40020c00
 800117c:	40021000 	.word	0x40021000
 8001180:	40013c00 	.word	0x40013c00

08001184 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691a      	ldr	r2, [r3, #16]
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	4013      	ands	r3, r2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d002      	beq.n	80011a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011a2:	2300      	movs	r3, #0
 80011a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	460b      	mov	r3, r1
 80011be:	807b      	strh	r3, [r7, #2]
 80011c0:	4613      	mov	r3, r2
 80011c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	787b      	ldrb	r3, [r7, #1]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ca:	887a      	ldrh	r2, [r7, #2]
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011d0:	e003      	b.n	80011da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011d2:	887b      	ldrh	r3, [r7, #2]
 80011d4:	041a      	lsls	r2, r3, #16
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	619a      	str	r2, [r3, #24]
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
 80011ee:	460b      	mov	r3, r1
 80011f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
 80011f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011f8:	887a      	ldrh	r2, [r7, #2]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	4013      	ands	r3, r2
 80011fe:	041a      	lsls	r2, r3, #16
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	43d9      	mvns	r1, r3
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	400b      	ands	r3, r1
 8001208:	431a      	orrs	r2, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	619a      	str	r2, [r3, #24]
}
 800120e:	bf00      	nop
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff fa04 	bl	8000648 <HAL_GPIO_EXTI_Callback>
  }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40013c00 	.word	0x40013c00

0800124c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d101      	bne.n	800125e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e267      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d075      	beq.n	8001356 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800126a:	4b88      	ldr	r3, [pc, #544]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b04      	cmp	r3, #4
 8001274:	d00c      	beq.n	8001290 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b85      	ldr	r3, [pc, #532]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800127e:	2b08      	cmp	r3, #8
 8001280:	d112      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001282:	4b82      	ldr	r3, [pc, #520]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800128a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800128e:	d10b      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d05b      	beq.n	8001354 <HAL_RCC_OscConfig+0x108>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d157      	bne.n	8001354 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012a4:	2301      	movs	r3, #1
 80012a6:	e242      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d106      	bne.n	80012c0 <HAL_RCC_OscConfig+0x74>
 80012b2:	4b76      	ldr	r3, [pc, #472]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a75      	ldr	r2, [pc, #468]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012bc:	6013      	str	r3, [r2, #0]
 80012be:	e01d      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x98>
 80012ca:	4b70      	ldr	r3, [pc, #448]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6f      	ldr	r2, [pc, #444]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	4b6d      	ldr	r3, [pc, #436]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a6c      	ldr	r2, [pc, #432]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0xb0>
 80012e4:	4b69      	ldr	r3, [pc, #420]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a68      	ldr	r2, [pc, #416]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ee:	6013      	str	r3, [r2, #0]
 80012f0:	4b66      	ldr	r3, [pc, #408]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80012f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d013      	beq.n	800132c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001304:	f7ff fc78 	bl	8000bf8 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800130c:	f7ff fc74 	bl	8000bf8 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e207      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800131e:	4b5b      	ldr	r3, [pc, #364]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0xc0>
 800132a:	e014      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fc64 	bl	8000bf8 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001334:	f7ff fc60 	bl	8000bf8 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b64      	cmp	r3, #100	; 0x64
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e1f3      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001346:	4b51      	ldr	r3, [pc, #324]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d1f0      	bne.n	8001334 <HAL_RCC_OscConfig+0xe8>
 8001352:	e000      	b.n	8001356 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001354:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	2b00      	cmp	r3, #0
 8001360:	d063      	beq.n	800142a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001362:	4b4a      	ldr	r3, [pc, #296]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
 800136a:	2b00      	cmp	r3, #0
 800136c:	d00b      	beq.n	8001386 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001376:	2b08      	cmp	r3, #8
 8001378:	d11c      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <HAL_RCC_OscConfig+0x240>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d116      	bne.n	80013b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001386:	4b41      	ldr	r3, [pc, #260]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d001      	beq.n	800139e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e1c7      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139e:	4b3b      	ldr	r3, [pc, #236]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4937      	ldr	r1, [pc, #220]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ae:	4313      	orrs	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013b2:	e03a      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d020      	beq.n	80013fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013bc:	4b34      	ldr	r3, [pc, #208]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 80013be:	2201      	movs	r2, #1
 80013c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013c2:	f7ff fc19 	bl	8000bf8 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c8:	e008      	b.n	80013dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013ca:	f7ff fc15 	bl	8000bf8 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	d901      	bls.n	80013dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d8:	2303      	movs	r3, #3
 80013da:	e1a8      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d0f0      	beq.n	80013ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	691b      	ldr	r3, [r3, #16]
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	4925      	ldr	r1, [pc, #148]	; (800148c <HAL_RCC_OscConfig+0x240>)
 80013f8:	4313      	orrs	r3, r2
 80013fa:	600b      	str	r3, [r1, #0]
 80013fc:	e015      	b.n	800142a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013fe:	4b24      	ldr	r3, [pc, #144]	; (8001490 <HAL_RCC_OscConfig+0x244>)
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001404:	f7ff fbf8 	bl	8000bf8 <HAL_GetTick>
 8001408:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140c:	f7ff fbf4 	bl	8000bf8 <HAL_GetTick>
 8001410:	4602      	mov	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e187      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1f0      	bne.n	800140c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0308 	and.w	r3, r3, #8
 8001432:	2b00      	cmp	r3, #0
 8001434:	d036      	beq.n	80014a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d016      	beq.n	800146c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800143e:	4b15      	ldr	r3, [pc, #84]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 8001440:	2201      	movs	r2, #1
 8001442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001444:	f7ff fbd8 	bl	8000bf8 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800144c:	f7ff fbd4 	bl	8000bf8 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e167      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <HAL_RCC_OscConfig+0x240>)
 8001460:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d0f0      	beq.n	800144c <HAL_RCC_OscConfig+0x200>
 800146a:	e01b      	b.n	80014a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800146c:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_RCC_OscConfig+0x248>)
 800146e:	2200      	movs	r2, #0
 8001470:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001472:	f7ff fbc1 	bl	8000bf8 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001478:	e00e      	b.n	8001498 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800147a:	f7ff fbbd 	bl	8000bf8 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d907      	bls.n	8001498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e150      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 800148c:	40023800 	.word	0x40023800
 8001490:	42470000 	.word	0x42470000
 8001494:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001498:	4b88      	ldr	r3, [pc, #544]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800149a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149c:	f003 0302 	and.w	r3, r3, #2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1ea      	bne.n	800147a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0304 	and.w	r3, r3, #4
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 8097 	beq.w	80015e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014b2:	2300      	movs	r3, #0
 80014b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014b6:	4b81      	ldr	r3, [pc, #516]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10f      	bne.n	80014e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ca:	4a7c      	ldr	r2, [pc, #496]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d0:	6413      	str	r3, [r2, #64]	; 0x40
 80014d2:	4b7a      	ldr	r3, [pc, #488]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80014d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014de:	2301      	movs	r3, #1
 80014e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b77      	ldr	r3, [pc, #476]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d118      	bne.n	8001520 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ee:	4b74      	ldr	r3, [pc, #464]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a73      	ldr	r2, [pc, #460]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 80014f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014fa:	f7ff fb7d 	bl	8000bf8 <HAL_GetTick>
 80014fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001502:	f7ff fb79 	bl	8000bf8 <HAL_GetTick>
 8001506:	4602      	mov	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e10c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b6a      	ldr	r3, [pc, #424]	; (80016c0 <HAL_RCC_OscConfig+0x474>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0f0      	beq.n	8001502 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d106      	bne.n	8001536 <HAL_RCC_OscConfig+0x2ea>
 8001528:	4b64      	ldr	r3, [pc, #400]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a63      	ldr	r2, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	e01c      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	2b05      	cmp	r3, #5
 800153c:	d10c      	bne.n	8001558 <HAL_RCC_OscConfig+0x30c>
 800153e:	4b5f      	ldr	r3, [pc, #380]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001542:	4a5e      	ldr	r2, [pc, #376]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0304 	orr.w	r3, r3, #4
 8001548:	6713      	str	r3, [r2, #112]	; 0x70
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800154c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154e:	4a5b      	ldr	r2, [pc, #364]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6713      	str	r3, [r2, #112]	; 0x70
 8001556:	e00b      	b.n	8001570 <HAL_RCC_OscConfig+0x324>
 8001558:	4b58      	ldr	r3, [pc, #352]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800155c:	4a57      	ldr	r2, [pc, #348]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6713      	str	r3, [r2, #112]	; 0x70
 8001564:	4b55      	ldr	r3, [pc, #340]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	4a54      	ldr	r2, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 800156a:	f023 0304 	bic.w	r3, r3, #4
 800156e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001578:	f7ff fb3e 	bl	8000bf8 <HAL_GetTick>
 800157c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800157e:	e00a      	b.n	8001596 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001580:	f7ff fb3a 	bl	8000bf8 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f241 3288 	movw	r2, #5000	; 0x1388
 800158e:	4293      	cmp	r3, r2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e0cb      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d0ee      	beq.n	8001580 <HAL_RCC_OscConfig+0x334>
 80015a2:	e014      	b.n	80015ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a4:	f7ff fb28 	bl	8000bf8 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	e00a      	b.n	80015c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff fb24 	bl	8000bf8 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d901      	bls.n	80015c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015be:	2303      	movs	r3, #3
 80015c0:	e0b5      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ee      	bne.n	80015ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7dfb      	ldrb	r3, [r7, #23]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b39      	ldr	r3, [pc, #228]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	4a38      	ldr	r2, [pc, #224]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80a1 	beq.w	800172c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015ea:	4b34      	ldr	r3, [pc, #208]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 030c 	and.w	r3, r3, #12
 80015f2:	2b08      	cmp	r3, #8
 80015f4:	d05c      	beq.n	80016b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b02      	cmp	r3, #2
 80015fc:	d141      	bne.n	8001682 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015fe:	4b31      	ldr	r3, [pc, #196]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff faf8 	bl	8000bf8 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800160c:	f7ff faf4 	bl	8000bf8 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b02      	cmp	r3, #2
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e087      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161e:	4b27      	ldr	r3, [pc, #156]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69da      	ldr	r2, [r3, #28]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001640:	085b      	lsrs	r3, r3, #1
 8001642:	3b01      	subs	r3, #1
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800164c:	061b      	lsls	r3, r3, #24
 800164e:	491b      	ldr	r1, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001650:	4313      	orrs	r3, r2
 8001652:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001654:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff facd 	bl	8000bf8 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001660:	e008      	b.n	8001674 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001662:	f7ff fac9 	bl	8000bf8 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d901      	bls.n	8001674 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e05c      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001674:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800167c:	2b00      	cmp	r3, #0
 800167e:	d0f0      	beq.n	8001662 <HAL_RCC_OscConfig+0x416>
 8001680:	e054      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <HAL_RCC_OscConfig+0x478>)
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001688:	f7ff fab6 	bl	8000bf8 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fab2 	bl	8000bf8 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e045      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_RCC_OscConfig+0x470>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x444>
 80016ae:	e03d      	b.n	800172c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d107      	bne.n	80016c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e038      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40007000 	.word	0x40007000
 80016c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c8:	4b1b      	ldr	r3, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4ec>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d028      	beq.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d121      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d11a      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016f2:	68fa      	ldr	r2, [r7, #12]
 80016f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f8:	4013      	ands	r3, r2
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170e:	085b      	lsrs	r3, r3, #1
 8001710:	3b01      	subs	r3, #1
 8001712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d107      	bne.n	8001728 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40023800 	.word	0x40023800

0800173c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d101      	bne.n	8001750 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0cc      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001750:	4b68      	ldr	r3, [pc, #416]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d90c      	bls.n	8001778 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b65      	ldr	r3, [pc, #404]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0b8      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d020      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0304 	and.w	r3, r3, #4
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001790:	4b59      	ldr	r3, [pc, #356]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a58      	ldr	r2, [pc, #352]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800179a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0308 	and.w	r3, r3, #8
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a8:	4b53      	ldr	r3, [pc, #332]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4a52      	ldr	r2, [pc, #328]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b4:	4b50      	ldr	r3, [pc, #320]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	494d      	ldr	r1, [pc, #308]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d044      	beq.n	800185c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017da:	4b47      	ldr	r3, [pc, #284]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d119      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e07f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d003      	beq.n	80017fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d107      	bne.n	800180a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fa:	4b3f      	ldr	r3, [pc, #252]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800180a:	4b3b      	ldr	r3, [pc, #236]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d101      	bne.n	800181a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e067      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800181a:	4b37      	ldr	r3, [pc, #220]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f023 0203 	bic.w	r2, r3, #3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	4934      	ldr	r1, [pc, #208]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800182c:	f7ff f9e4 	bl	8000bf8 <HAL_GetTick>
 8001830:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff f9e0 	bl	8000bf8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e04f      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800184a:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 020c 	and.w	r2, r3, #12
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	429a      	cmp	r2, r3
 800185a:	d1eb      	bne.n	8001834 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800185c:	4b25      	ldr	r3, [pc, #148]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d20c      	bcs.n	8001884 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b20      	ldr	r3, [pc, #128]	; (80018f4 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e032      	b.n	80018ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d008      	beq.n	80018a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	4916      	ldr	r1, [pc, #88]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	4313      	orrs	r3, r2
 80018a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0308 	and.w	r3, r3, #8
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d009      	beq.n	80018c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	691b      	ldr	r3, [r3, #16]
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	490e      	ldr	r1, [pc, #56]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	4313      	orrs	r3, r2
 80018c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018c2:	f000 f821 	bl	8001908 <HAL_RCC_GetSysClockFreq>
 80018c6:	4602      	mov	r2, r0
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	490a      	ldr	r1, [pc, #40]	; (80018fc <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	5ccb      	ldrb	r3, [r1, r3]
 80018d6:	fa22 f303 	lsr.w	r3, r2, r3
 80018da:	4a09      	ldr	r2, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1c4>)
 80018dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff f944 	bl	8000b70 <HAL_InitTick>

  return HAL_OK;
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023c00 	.word	0x40023c00
 80018f8:	40023800 	.word	0x40023800
 80018fc:	08002c44 	.word	0x08002c44
 8001900:	20000000 	.word	0x20000000
 8001904:	20000004 	.word	0x20000004

08001908 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800190c:	b090      	sub	sp, #64	; 0x40
 800190e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	; 0x34
 8001914:	2300      	movs	r3, #0
 8001916:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001918:	2300      	movs	r3, #0
 800191a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 030c 	and.w	r3, r3, #12
 8001928:	2b08      	cmp	r3, #8
 800192a:	d00d      	beq.n	8001948 <HAL_RCC_GetSysClockFreq+0x40>
 800192c:	2b08      	cmp	r3, #8
 800192e:	f200 80a1 	bhi.w	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
 8001932:	2b00      	cmp	r3, #0
 8001934:	d002      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x34>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d003      	beq.n	8001942 <HAL_RCC_GetSysClockFreq+0x3a>
 800193a:	e09b      	b.n	8001a74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193c:	4b53      	ldr	r3, [pc, #332]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001940:	e09b      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001942:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001944:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001946:	e098      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001950:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001952:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d028      	beq.n	80019b0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195e:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	099b      	lsrs	r3, r3, #6
 8001964:	2200      	movs	r2, #0
 8001966:	623b      	str	r3, [r7, #32]
 8001968:	627a      	str	r2, [r7, #36]	; 0x24
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001970:	2100      	movs	r1, #0
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001974:	fb03 f201 	mul.w	r2, r3, r1
 8001978:	2300      	movs	r3, #0
 800197a:	fb00 f303 	mul.w	r3, r0, r3
 800197e:	4413      	add	r3, r2
 8001980:	4a43      	ldr	r2, [pc, #268]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x188>)
 8001982:	fba0 1202 	umull	r1, r2, r0, r2
 8001986:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001988:	460a      	mov	r2, r1
 800198a:	62ba      	str	r2, [r7, #40]	; 0x28
 800198c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800198e:	4413      	add	r3, r2
 8001990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001994:	2200      	movs	r2, #0
 8001996:	61bb      	str	r3, [r7, #24]
 8001998:	61fa      	str	r2, [r7, #28]
 800199a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800199e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019a2:	f7fe fc6d 	bl	8000280 <__aeabi_uldivmod>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4613      	mov	r3, r2
 80019ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019ae:	e053      	b.n	8001a58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4b35      	ldr	r3, [pc, #212]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	613b      	str	r3, [r7, #16]
 80019ba:	617a      	str	r2, [r7, #20]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80019c2:	f04f 0b00 	mov.w	fp, #0
 80019c6:	4652      	mov	r2, sl
 80019c8:	465b      	mov	r3, fp
 80019ca:	f04f 0000 	mov.w	r0, #0
 80019ce:	f04f 0100 	mov.w	r1, #0
 80019d2:	0159      	lsls	r1, r3, #5
 80019d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019d8:	0150      	lsls	r0, r2, #5
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	ebb2 080a 	subs.w	r8, r2, sl
 80019e2:	eb63 090b 	sbc.w	r9, r3, fp
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80019f2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80019f6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80019fa:	ebb2 0408 	subs.w	r4, r2, r8
 80019fe:	eb63 0509 	sbc.w	r5, r3, r9
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	00eb      	lsls	r3, r5, #3
 8001a0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a10:	00e2      	lsls	r2, r4, #3
 8001a12:	4614      	mov	r4, r2
 8001a14:	461d      	mov	r5, r3
 8001a16:	eb14 030a 	adds.w	r3, r4, sl
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	eb45 030b 	adc.w	r3, r5, fp
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	f04f 0200 	mov.w	r2, #0
 8001a26:	f04f 0300 	mov.w	r3, #0
 8001a2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a2e:	4629      	mov	r1, r5
 8001a30:	028b      	lsls	r3, r1, #10
 8001a32:	4621      	mov	r1, r4
 8001a34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a38:	4621      	mov	r1, r4
 8001a3a:	028a      	lsls	r2, r1, #10
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4619      	mov	r1, r3
 8001a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a42:	2200      	movs	r2, #0
 8001a44:	60bb      	str	r3, [r7, #8]
 8001a46:	60fa      	str	r2, [r7, #12]
 8001a48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001a4c:	f7fe fc18 	bl	8000280 <__aeabi_uldivmod>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4613      	mov	r3, r2
 8001a56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a58:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	0c1b      	lsrs	r3, r3, #16
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	3301      	adds	r3, #1
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001a68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a72:	e002      	b.n	8001a7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a74:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <HAL_RCC_GetSysClockFreq+0x184>)
 8001a76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001a78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3740      	adds	r7, #64	; 0x40
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	017d7840 	.word	0x017d7840

08001a94 <__errno>:
 8001a94:	4b01      	ldr	r3, [pc, #4]	; (8001a9c <__errno+0x8>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000000c 	.word	0x2000000c

08001aa0 <__libc_init_array>:
 8001aa0:	b570      	push	{r4, r5, r6, lr}
 8001aa2:	4d0d      	ldr	r5, [pc, #52]	; (8001ad8 <__libc_init_array+0x38>)
 8001aa4:	4c0d      	ldr	r4, [pc, #52]	; (8001adc <__libc_init_array+0x3c>)
 8001aa6:	1b64      	subs	r4, r4, r5
 8001aa8:	10a4      	asrs	r4, r4, #2
 8001aaa:	2600      	movs	r6, #0
 8001aac:	42a6      	cmp	r6, r4
 8001aae:	d109      	bne.n	8001ac4 <__libc_init_array+0x24>
 8001ab0:	4d0b      	ldr	r5, [pc, #44]	; (8001ae0 <__libc_init_array+0x40>)
 8001ab2:	4c0c      	ldr	r4, [pc, #48]	; (8001ae4 <__libc_init_array+0x44>)
 8001ab4:	f001 f8ba 	bl	8002c2c <_init>
 8001ab8:	1b64      	subs	r4, r4, r5
 8001aba:	10a4      	asrs	r4, r4, #2
 8001abc:	2600      	movs	r6, #0
 8001abe:	42a6      	cmp	r6, r4
 8001ac0:	d105      	bne.n	8001ace <__libc_init_array+0x2e>
 8001ac2:	bd70      	pop	{r4, r5, r6, pc}
 8001ac4:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ac8:	4798      	blx	r3
 8001aca:	3601      	adds	r6, #1
 8001acc:	e7ee      	b.n	8001aac <__libc_init_array+0xc>
 8001ace:	f855 3b04 	ldr.w	r3, [r5], #4
 8001ad2:	4798      	blx	r3
 8001ad4:	3601      	adds	r6, #1
 8001ad6:	e7f2      	b.n	8001abe <__libc_init_array+0x1e>
 8001ad8:	08002da4 	.word	0x08002da4
 8001adc:	08002da4 	.word	0x08002da4
 8001ae0:	08002da4 	.word	0x08002da4
 8001ae4:	08002da8 	.word	0x08002da8

08001ae8 <memset>:
 8001ae8:	4402      	add	r2, r0
 8001aea:	4603      	mov	r3, r0
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d100      	bne.n	8001af2 <memset+0xa>
 8001af0:	4770      	bx	lr
 8001af2:	f803 1b01 	strb.w	r1, [r3], #1
 8001af6:	e7f9      	b.n	8001aec <memset+0x4>

08001af8 <srand>:
 8001af8:	b538      	push	{r3, r4, r5, lr}
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <srand+0x44>)
 8001afc:	681d      	ldr	r5, [r3, #0]
 8001afe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b00:	4604      	mov	r4, r0
 8001b02:	b9b3      	cbnz	r3, 8001b32 <srand+0x3a>
 8001b04:	2018      	movs	r0, #24
 8001b06:	f000 f8bf 	bl	8001c88 <malloc>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	63a8      	str	r0, [r5, #56]	; 0x38
 8001b0e:	b920      	cbnz	r0, 8001b1a <srand+0x22>
 8001b10:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <srand+0x48>)
 8001b12:	480c      	ldr	r0, [pc, #48]	; (8001b44 <srand+0x4c>)
 8001b14:	2142      	movs	r1, #66	; 0x42
 8001b16:	f000 f875 	bl	8001c04 <__assert_func>
 8001b1a:	490b      	ldr	r1, [pc, #44]	; (8001b48 <srand+0x50>)
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <srand+0x54>)
 8001b1e:	e9c0 1300 	strd	r1, r3, [r0]
 8001b22:	4b0b      	ldr	r3, [pc, #44]	; (8001b50 <srand+0x58>)
 8001b24:	6083      	str	r3, [r0, #8]
 8001b26:	230b      	movs	r3, #11
 8001b28:	8183      	strh	r3, [r0, #12]
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001b32:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001b34:	2200      	movs	r2, #0
 8001b36:	611c      	str	r4, [r3, #16]
 8001b38:	615a      	str	r2, [r3, #20]
 8001b3a:	bd38      	pop	{r3, r4, r5, pc}
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	08002c58 	.word	0x08002c58
 8001b44:	08002c6f 	.word	0x08002c6f
 8001b48:	abcd330e 	.word	0xabcd330e
 8001b4c:	e66d1234 	.word	0xe66d1234
 8001b50:	0005deec 	.word	0x0005deec

08001b54 <rand>:
 8001b54:	4b16      	ldr	r3, [pc, #88]	; (8001bb0 <rand+0x5c>)
 8001b56:	b510      	push	{r4, lr}
 8001b58:	681c      	ldr	r4, [r3, #0]
 8001b5a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001b5c:	b9b3      	cbnz	r3, 8001b8c <rand+0x38>
 8001b5e:	2018      	movs	r0, #24
 8001b60:	f000 f892 	bl	8001c88 <malloc>
 8001b64:	63a0      	str	r0, [r4, #56]	; 0x38
 8001b66:	b928      	cbnz	r0, 8001b74 <rand+0x20>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <rand+0x60>)
 8001b6c:	4812      	ldr	r0, [pc, #72]	; (8001bb8 <rand+0x64>)
 8001b6e:	214e      	movs	r1, #78	; 0x4e
 8001b70:	f000 f848 	bl	8001c04 <__assert_func>
 8001b74:	4a11      	ldr	r2, [pc, #68]	; (8001bbc <rand+0x68>)
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <rand+0x6c>)
 8001b78:	e9c0 2300 	strd	r2, r3, [r0]
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <rand+0x70>)
 8001b7e:	6083      	str	r3, [r0, #8]
 8001b80:	230b      	movs	r3, #11
 8001b82:	8183      	strh	r3, [r0, #12]
 8001b84:	2201      	movs	r2, #1
 8001b86:	2300      	movs	r3, #0
 8001b88:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8001b8c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8001b8e:	4a0e      	ldr	r2, [pc, #56]	; (8001bc8 <rand+0x74>)
 8001b90:	6920      	ldr	r0, [r4, #16]
 8001b92:	6963      	ldr	r3, [r4, #20]
 8001b94:	490d      	ldr	r1, [pc, #52]	; (8001bcc <rand+0x78>)
 8001b96:	4342      	muls	r2, r0
 8001b98:	fb01 2203 	mla	r2, r1, r3, r2
 8001b9c:	fba0 0101 	umull	r0, r1, r0, r1
 8001ba0:	1c43      	adds	r3, r0, #1
 8001ba2:	eb42 0001 	adc.w	r0, r2, r1
 8001ba6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8001baa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8001bae:	bd10      	pop	{r4, pc}
 8001bb0:	2000000c 	.word	0x2000000c
 8001bb4:	08002c58 	.word	0x08002c58
 8001bb8:	08002c6f 	.word	0x08002c6f
 8001bbc:	abcd330e 	.word	0xabcd330e
 8001bc0:	e66d1234 	.word	0xe66d1234
 8001bc4:	0005deec 	.word	0x0005deec
 8001bc8:	5851f42d 	.word	0x5851f42d
 8001bcc:	4c957f2d 	.word	0x4c957f2d

08001bd0 <time>:
 8001bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <time+0x30>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4669      	mov	r1, sp
 8001bd8:	4604      	mov	r4, r0
 8001bda:	6818      	ldr	r0, [r3, #0]
 8001bdc:	f000 f842 	bl	8001c64 <_gettimeofday_r>
 8001be0:	2800      	cmp	r0, #0
 8001be2:	bfbe      	ittt	lt
 8001be4:	f04f 32ff 	movlt.w	r2, #4294967295
 8001be8:	f04f 33ff 	movlt.w	r3, #4294967295
 8001bec:	e9cd 2300 	strdlt	r2, r3, [sp]
 8001bf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001bf4:	b10c      	cbz	r4, 8001bfa <time+0x2a>
 8001bf6:	e9c4 0100 	strd	r0, r1, [r4]
 8001bfa:	b004      	add	sp, #16
 8001bfc:	bd10      	pop	{r4, pc}
 8001bfe:	bf00      	nop
 8001c00:	2000000c 	.word	0x2000000c

08001c04 <__assert_func>:
 8001c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c06:	4614      	mov	r4, r2
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <__assert_func+0x2c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4605      	mov	r5, r0
 8001c10:	68d8      	ldr	r0, [r3, #12]
 8001c12:	b14c      	cbz	r4, 8001c28 <__assert_func+0x24>
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <__assert_func+0x30>)
 8001c16:	9100      	str	r1, [sp, #0]
 8001c18:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8001c1c:	4906      	ldr	r1, [pc, #24]	; (8001c38 <__assert_func+0x34>)
 8001c1e:	462b      	mov	r3, r5
 8001c20:	f000 f80e 	bl	8001c40 <fiprintf>
 8001c24:	f000 fcd6 	bl	80025d4 <abort>
 8001c28:	4b04      	ldr	r3, [pc, #16]	; (8001c3c <__assert_func+0x38>)
 8001c2a:	461c      	mov	r4, r3
 8001c2c:	e7f3      	b.n	8001c16 <__assert_func+0x12>
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	08002cca 	.word	0x08002cca
 8001c38:	08002cd7 	.word	0x08002cd7
 8001c3c:	08002d05 	.word	0x08002d05

08001c40 <fiprintf>:
 8001c40:	b40e      	push	{r1, r2, r3}
 8001c42:	b503      	push	{r0, r1, lr}
 8001c44:	4601      	mov	r1, r0
 8001c46:	ab03      	add	r3, sp, #12
 8001c48:	4805      	ldr	r0, [pc, #20]	; (8001c60 <fiprintf+0x20>)
 8001c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001c4e:	6800      	ldr	r0, [r0, #0]
 8001c50:	9301      	str	r3, [sp, #4]
 8001c52:	f000 f92b 	bl	8001eac <_vfiprintf_r>
 8001c56:	b002      	add	sp, #8
 8001c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8001c5c:	b003      	add	sp, #12
 8001c5e:	4770      	bx	lr
 8001c60:	2000000c 	.word	0x2000000c

08001c64 <_gettimeofday_r>:
 8001c64:	b538      	push	{r3, r4, r5, lr}
 8001c66:	4d07      	ldr	r5, [pc, #28]	; (8001c84 <_gettimeofday_r+0x20>)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	4608      	mov	r0, r1
 8001c6e:	4611      	mov	r1, r2
 8001c70:	602b      	str	r3, [r5, #0]
 8001c72:	f000 ffd3 	bl	8002c1c <_gettimeofday>
 8001c76:	1c43      	adds	r3, r0, #1
 8001c78:	d102      	bne.n	8001c80 <_gettimeofday_r+0x1c>
 8001c7a:	682b      	ldr	r3, [r5, #0]
 8001c7c:	b103      	cbz	r3, 8001c80 <_gettimeofday_r+0x1c>
 8001c7e:	6023      	str	r3, [r4, #0]
 8001c80:	bd38      	pop	{r3, r4, r5, pc}
 8001c82:	bf00      	nop
 8001c84:	2000009c 	.word	0x2000009c

08001c88 <malloc>:
 8001c88:	4b02      	ldr	r3, [pc, #8]	; (8001c94 <malloc+0xc>)
 8001c8a:	4601      	mov	r1, r0
 8001c8c:	6818      	ldr	r0, [r3, #0]
 8001c8e:	f000 b86f 	b.w	8001d70 <_malloc_r>
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c

08001c98 <_free_r>:
 8001c98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001c9a:	2900      	cmp	r1, #0
 8001c9c:	d044      	beq.n	8001d28 <_free_r+0x90>
 8001c9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ca2:	9001      	str	r0, [sp, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f1a1 0404 	sub.w	r4, r1, #4
 8001caa:	bfb8      	it	lt
 8001cac:	18e4      	addlt	r4, r4, r3
 8001cae:	f000 feb9 	bl	8002a24 <__malloc_lock>
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <_free_r+0x94>)
 8001cb4:	9801      	ldr	r0, [sp, #4]
 8001cb6:	6813      	ldr	r3, [r2, #0]
 8001cb8:	b933      	cbnz	r3, 8001cc8 <_free_r+0x30>
 8001cba:	6063      	str	r3, [r4, #4]
 8001cbc:	6014      	str	r4, [r2, #0]
 8001cbe:	b003      	add	sp, #12
 8001cc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001cc4:	f000 beb4 	b.w	8002a30 <__malloc_unlock>
 8001cc8:	42a3      	cmp	r3, r4
 8001cca:	d908      	bls.n	8001cde <_free_r+0x46>
 8001ccc:	6825      	ldr	r5, [r4, #0]
 8001cce:	1961      	adds	r1, r4, r5
 8001cd0:	428b      	cmp	r3, r1
 8001cd2:	bf01      	itttt	eq
 8001cd4:	6819      	ldreq	r1, [r3, #0]
 8001cd6:	685b      	ldreq	r3, [r3, #4]
 8001cd8:	1949      	addeq	r1, r1, r5
 8001cda:	6021      	streq	r1, [r4, #0]
 8001cdc:	e7ed      	b.n	8001cba <_free_r+0x22>
 8001cde:	461a      	mov	r2, r3
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	b10b      	cbz	r3, 8001ce8 <_free_r+0x50>
 8001ce4:	42a3      	cmp	r3, r4
 8001ce6:	d9fa      	bls.n	8001cde <_free_r+0x46>
 8001ce8:	6811      	ldr	r1, [r2, #0]
 8001cea:	1855      	adds	r5, r2, r1
 8001cec:	42a5      	cmp	r5, r4
 8001cee:	d10b      	bne.n	8001d08 <_free_r+0x70>
 8001cf0:	6824      	ldr	r4, [r4, #0]
 8001cf2:	4421      	add	r1, r4
 8001cf4:	1854      	adds	r4, r2, r1
 8001cf6:	42a3      	cmp	r3, r4
 8001cf8:	6011      	str	r1, [r2, #0]
 8001cfa:	d1e0      	bne.n	8001cbe <_free_r+0x26>
 8001cfc:	681c      	ldr	r4, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	6053      	str	r3, [r2, #4]
 8001d02:	4421      	add	r1, r4
 8001d04:	6011      	str	r1, [r2, #0]
 8001d06:	e7da      	b.n	8001cbe <_free_r+0x26>
 8001d08:	d902      	bls.n	8001d10 <_free_r+0x78>
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	6003      	str	r3, [r0, #0]
 8001d0e:	e7d6      	b.n	8001cbe <_free_r+0x26>
 8001d10:	6825      	ldr	r5, [r4, #0]
 8001d12:	1961      	adds	r1, r4, r5
 8001d14:	428b      	cmp	r3, r1
 8001d16:	bf04      	itt	eq
 8001d18:	6819      	ldreq	r1, [r3, #0]
 8001d1a:	685b      	ldreq	r3, [r3, #4]
 8001d1c:	6063      	str	r3, [r4, #4]
 8001d1e:	bf04      	itt	eq
 8001d20:	1949      	addeq	r1, r1, r5
 8001d22:	6021      	streq	r1, [r4, #0]
 8001d24:	6054      	str	r4, [r2, #4]
 8001d26:	e7ca      	b.n	8001cbe <_free_r+0x26>
 8001d28:	b003      	add	sp, #12
 8001d2a:	bd30      	pop	{r4, r5, pc}
 8001d2c:	20000094 	.word	0x20000094

08001d30 <sbrk_aligned>:
 8001d30:	b570      	push	{r4, r5, r6, lr}
 8001d32:	4e0e      	ldr	r6, [pc, #56]	; (8001d6c <sbrk_aligned+0x3c>)
 8001d34:	460c      	mov	r4, r1
 8001d36:	6831      	ldr	r1, [r6, #0]
 8001d38:	4605      	mov	r5, r0
 8001d3a:	b911      	cbnz	r1, 8001d42 <sbrk_aligned+0x12>
 8001d3c:	f000 fb7a 	bl	8002434 <_sbrk_r>
 8001d40:	6030      	str	r0, [r6, #0]
 8001d42:	4621      	mov	r1, r4
 8001d44:	4628      	mov	r0, r5
 8001d46:	f000 fb75 	bl	8002434 <_sbrk_r>
 8001d4a:	1c43      	adds	r3, r0, #1
 8001d4c:	d00a      	beq.n	8001d64 <sbrk_aligned+0x34>
 8001d4e:	1cc4      	adds	r4, r0, #3
 8001d50:	f024 0403 	bic.w	r4, r4, #3
 8001d54:	42a0      	cmp	r0, r4
 8001d56:	d007      	beq.n	8001d68 <sbrk_aligned+0x38>
 8001d58:	1a21      	subs	r1, r4, r0
 8001d5a:	4628      	mov	r0, r5
 8001d5c:	f000 fb6a 	bl	8002434 <_sbrk_r>
 8001d60:	3001      	adds	r0, #1
 8001d62:	d101      	bne.n	8001d68 <sbrk_aligned+0x38>
 8001d64:	f04f 34ff 	mov.w	r4, #4294967295
 8001d68:	4620      	mov	r0, r4
 8001d6a:	bd70      	pop	{r4, r5, r6, pc}
 8001d6c:	20000098 	.word	0x20000098

08001d70 <_malloc_r>:
 8001d70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d74:	1ccd      	adds	r5, r1, #3
 8001d76:	f025 0503 	bic.w	r5, r5, #3
 8001d7a:	3508      	adds	r5, #8
 8001d7c:	2d0c      	cmp	r5, #12
 8001d7e:	bf38      	it	cc
 8001d80:	250c      	movcc	r5, #12
 8001d82:	2d00      	cmp	r5, #0
 8001d84:	4607      	mov	r7, r0
 8001d86:	db01      	blt.n	8001d8c <_malloc_r+0x1c>
 8001d88:	42a9      	cmp	r1, r5
 8001d8a:	d905      	bls.n	8001d98 <_malloc_r+0x28>
 8001d8c:	230c      	movs	r3, #12
 8001d8e:	603b      	str	r3, [r7, #0]
 8001d90:	2600      	movs	r6, #0
 8001d92:	4630      	mov	r0, r6
 8001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d98:	4e2e      	ldr	r6, [pc, #184]	; (8001e54 <_malloc_r+0xe4>)
 8001d9a:	f000 fe43 	bl	8002a24 <__malloc_lock>
 8001d9e:	6833      	ldr	r3, [r6, #0]
 8001da0:	461c      	mov	r4, r3
 8001da2:	bb34      	cbnz	r4, 8001df2 <_malloc_r+0x82>
 8001da4:	4629      	mov	r1, r5
 8001da6:	4638      	mov	r0, r7
 8001da8:	f7ff ffc2 	bl	8001d30 <sbrk_aligned>
 8001dac:	1c43      	adds	r3, r0, #1
 8001dae:	4604      	mov	r4, r0
 8001db0:	d14d      	bne.n	8001e4e <_malloc_r+0xde>
 8001db2:	6834      	ldr	r4, [r6, #0]
 8001db4:	4626      	mov	r6, r4
 8001db6:	2e00      	cmp	r6, #0
 8001db8:	d140      	bne.n	8001e3c <_malloc_r+0xcc>
 8001dba:	6823      	ldr	r3, [r4, #0]
 8001dbc:	4631      	mov	r1, r6
 8001dbe:	4638      	mov	r0, r7
 8001dc0:	eb04 0803 	add.w	r8, r4, r3
 8001dc4:	f000 fb36 	bl	8002434 <_sbrk_r>
 8001dc8:	4580      	cmp	r8, r0
 8001dca:	d13a      	bne.n	8001e42 <_malloc_r+0xd2>
 8001dcc:	6821      	ldr	r1, [r4, #0]
 8001dce:	3503      	adds	r5, #3
 8001dd0:	1a6d      	subs	r5, r5, r1
 8001dd2:	f025 0503 	bic.w	r5, r5, #3
 8001dd6:	3508      	adds	r5, #8
 8001dd8:	2d0c      	cmp	r5, #12
 8001dda:	bf38      	it	cc
 8001ddc:	250c      	movcc	r5, #12
 8001dde:	4629      	mov	r1, r5
 8001de0:	4638      	mov	r0, r7
 8001de2:	f7ff ffa5 	bl	8001d30 <sbrk_aligned>
 8001de6:	3001      	adds	r0, #1
 8001de8:	d02b      	beq.n	8001e42 <_malloc_r+0xd2>
 8001dea:	6823      	ldr	r3, [r4, #0]
 8001dec:	442b      	add	r3, r5
 8001dee:	6023      	str	r3, [r4, #0]
 8001df0:	e00e      	b.n	8001e10 <_malloc_r+0xa0>
 8001df2:	6822      	ldr	r2, [r4, #0]
 8001df4:	1b52      	subs	r2, r2, r5
 8001df6:	d41e      	bmi.n	8001e36 <_malloc_r+0xc6>
 8001df8:	2a0b      	cmp	r2, #11
 8001dfa:	d916      	bls.n	8001e2a <_malloc_r+0xba>
 8001dfc:	1961      	adds	r1, r4, r5
 8001dfe:	42a3      	cmp	r3, r4
 8001e00:	6025      	str	r5, [r4, #0]
 8001e02:	bf18      	it	ne
 8001e04:	6059      	strne	r1, [r3, #4]
 8001e06:	6863      	ldr	r3, [r4, #4]
 8001e08:	bf08      	it	eq
 8001e0a:	6031      	streq	r1, [r6, #0]
 8001e0c:	5162      	str	r2, [r4, r5]
 8001e0e:	604b      	str	r3, [r1, #4]
 8001e10:	4638      	mov	r0, r7
 8001e12:	f104 060b 	add.w	r6, r4, #11
 8001e16:	f000 fe0b 	bl	8002a30 <__malloc_unlock>
 8001e1a:	f026 0607 	bic.w	r6, r6, #7
 8001e1e:	1d23      	adds	r3, r4, #4
 8001e20:	1af2      	subs	r2, r6, r3
 8001e22:	d0b6      	beq.n	8001d92 <_malloc_r+0x22>
 8001e24:	1b9b      	subs	r3, r3, r6
 8001e26:	50a3      	str	r3, [r4, r2]
 8001e28:	e7b3      	b.n	8001d92 <_malloc_r+0x22>
 8001e2a:	6862      	ldr	r2, [r4, #4]
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	bf0c      	ite	eq
 8001e30:	6032      	streq	r2, [r6, #0]
 8001e32:	605a      	strne	r2, [r3, #4]
 8001e34:	e7ec      	b.n	8001e10 <_malloc_r+0xa0>
 8001e36:	4623      	mov	r3, r4
 8001e38:	6864      	ldr	r4, [r4, #4]
 8001e3a:	e7b2      	b.n	8001da2 <_malloc_r+0x32>
 8001e3c:	4634      	mov	r4, r6
 8001e3e:	6876      	ldr	r6, [r6, #4]
 8001e40:	e7b9      	b.n	8001db6 <_malloc_r+0x46>
 8001e42:	230c      	movs	r3, #12
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4638      	mov	r0, r7
 8001e48:	f000 fdf2 	bl	8002a30 <__malloc_unlock>
 8001e4c:	e7a1      	b.n	8001d92 <_malloc_r+0x22>
 8001e4e:	6025      	str	r5, [r4, #0]
 8001e50:	e7de      	b.n	8001e10 <_malloc_r+0xa0>
 8001e52:	bf00      	nop
 8001e54:	20000094 	.word	0x20000094

08001e58 <__sfputc_r>:
 8001e58:	6893      	ldr	r3, [r2, #8]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	b410      	push	{r4}
 8001e60:	6093      	str	r3, [r2, #8]
 8001e62:	da08      	bge.n	8001e76 <__sfputc_r+0x1e>
 8001e64:	6994      	ldr	r4, [r2, #24]
 8001e66:	42a3      	cmp	r3, r4
 8001e68:	db01      	blt.n	8001e6e <__sfputc_r+0x16>
 8001e6a:	290a      	cmp	r1, #10
 8001e6c:	d103      	bne.n	8001e76 <__sfputc_r+0x1e>
 8001e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e72:	f000 baef 	b.w	8002454 <__swbuf_r>
 8001e76:	6813      	ldr	r3, [r2, #0]
 8001e78:	1c58      	adds	r0, r3, #1
 8001e7a:	6010      	str	r0, [r2, #0]
 8001e7c:	7019      	strb	r1, [r3, #0]
 8001e7e:	4608      	mov	r0, r1
 8001e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <__sfputs_r>:
 8001e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e88:	4606      	mov	r6, r0
 8001e8a:	460f      	mov	r7, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	18d5      	adds	r5, r2, r3
 8001e90:	42ac      	cmp	r4, r5
 8001e92:	d101      	bne.n	8001e98 <__sfputs_r+0x12>
 8001e94:	2000      	movs	r0, #0
 8001e96:	e007      	b.n	8001ea8 <__sfputs_r+0x22>
 8001e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e9c:	463a      	mov	r2, r7
 8001e9e:	4630      	mov	r0, r6
 8001ea0:	f7ff ffda 	bl	8001e58 <__sfputc_r>
 8001ea4:	1c43      	adds	r3, r0, #1
 8001ea6:	d1f3      	bne.n	8001e90 <__sfputs_r+0xa>
 8001ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001eac <_vfiprintf_r>:
 8001eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001eb0:	460d      	mov	r5, r1
 8001eb2:	b09d      	sub	sp, #116	; 0x74
 8001eb4:	4614      	mov	r4, r2
 8001eb6:	4698      	mov	r8, r3
 8001eb8:	4606      	mov	r6, r0
 8001eba:	b118      	cbz	r0, 8001ec4 <_vfiprintf_r+0x18>
 8001ebc:	6983      	ldr	r3, [r0, #24]
 8001ebe:	b90b      	cbnz	r3, 8001ec4 <_vfiprintf_r+0x18>
 8001ec0:	f000 fcaa 	bl	8002818 <__sinit>
 8001ec4:	4b89      	ldr	r3, [pc, #548]	; (80020ec <_vfiprintf_r+0x240>)
 8001ec6:	429d      	cmp	r5, r3
 8001ec8:	d11b      	bne.n	8001f02 <_vfiprintf_r+0x56>
 8001eca:	6875      	ldr	r5, [r6, #4]
 8001ecc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ece:	07d9      	lsls	r1, r3, #31
 8001ed0:	d405      	bmi.n	8001ede <_vfiprintf_r+0x32>
 8001ed2:	89ab      	ldrh	r3, [r5, #12]
 8001ed4:	059a      	lsls	r2, r3, #22
 8001ed6:	d402      	bmi.n	8001ede <_vfiprintf_r+0x32>
 8001ed8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001eda:	f000 fd3b 	bl	8002954 <__retarget_lock_acquire_recursive>
 8001ede:	89ab      	ldrh	r3, [r5, #12]
 8001ee0:	071b      	lsls	r3, r3, #28
 8001ee2:	d501      	bpl.n	8001ee8 <_vfiprintf_r+0x3c>
 8001ee4:	692b      	ldr	r3, [r5, #16]
 8001ee6:	b9eb      	cbnz	r3, 8001f24 <_vfiprintf_r+0x78>
 8001ee8:	4629      	mov	r1, r5
 8001eea:	4630      	mov	r0, r6
 8001eec:	f000 fb04 	bl	80024f8 <__swsetup_r>
 8001ef0:	b1c0      	cbz	r0, 8001f24 <_vfiprintf_r+0x78>
 8001ef2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001ef4:	07dc      	lsls	r4, r3, #31
 8001ef6:	d50e      	bpl.n	8001f16 <_vfiprintf_r+0x6a>
 8001ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8001efc:	b01d      	add	sp, #116	; 0x74
 8001efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f02:	4b7b      	ldr	r3, [pc, #492]	; (80020f0 <_vfiprintf_r+0x244>)
 8001f04:	429d      	cmp	r5, r3
 8001f06:	d101      	bne.n	8001f0c <_vfiprintf_r+0x60>
 8001f08:	68b5      	ldr	r5, [r6, #8]
 8001f0a:	e7df      	b.n	8001ecc <_vfiprintf_r+0x20>
 8001f0c:	4b79      	ldr	r3, [pc, #484]	; (80020f4 <_vfiprintf_r+0x248>)
 8001f0e:	429d      	cmp	r5, r3
 8001f10:	bf08      	it	eq
 8001f12:	68f5      	ldreq	r5, [r6, #12]
 8001f14:	e7da      	b.n	8001ecc <_vfiprintf_r+0x20>
 8001f16:	89ab      	ldrh	r3, [r5, #12]
 8001f18:	0598      	lsls	r0, r3, #22
 8001f1a:	d4ed      	bmi.n	8001ef8 <_vfiprintf_r+0x4c>
 8001f1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001f1e:	f000 fd1a 	bl	8002956 <__retarget_lock_release_recursive>
 8001f22:	e7e9      	b.n	8001ef8 <_vfiprintf_r+0x4c>
 8001f24:	2300      	movs	r3, #0
 8001f26:	9309      	str	r3, [sp, #36]	; 0x24
 8001f28:	2320      	movs	r3, #32
 8001f2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001f2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f32:	2330      	movs	r3, #48	; 0x30
 8001f34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80020f8 <_vfiprintf_r+0x24c>
 8001f38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001f3c:	f04f 0901 	mov.w	r9, #1
 8001f40:	4623      	mov	r3, r4
 8001f42:	469a      	mov	sl, r3
 8001f44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f48:	b10a      	cbz	r2, 8001f4e <_vfiprintf_r+0xa2>
 8001f4a:	2a25      	cmp	r2, #37	; 0x25
 8001f4c:	d1f9      	bne.n	8001f42 <_vfiprintf_r+0x96>
 8001f4e:	ebba 0b04 	subs.w	fp, sl, r4
 8001f52:	d00b      	beq.n	8001f6c <_vfiprintf_r+0xc0>
 8001f54:	465b      	mov	r3, fp
 8001f56:	4622      	mov	r2, r4
 8001f58:	4629      	mov	r1, r5
 8001f5a:	4630      	mov	r0, r6
 8001f5c:	f7ff ff93 	bl	8001e86 <__sfputs_r>
 8001f60:	3001      	adds	r0, #1
 8001f62:	f000 80aa 	beq.w	80020ba <_vfiprintf_r+0x20e>
 8001f66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001f68:	445a      	add	r2, fp
 8001f6a:	9209      	str	r2, [sp, #36]	; 0x24
 8001f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 80a2 	beq.w	80020ba <_vfiprintf_r+0x20e>
 8001f76:	2300      	movs	r3, #0
 8001f78:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f80:	f10a 0a01 	add.w	sl, sl, #1
 8001f84:	9304      	str	r3, [sp, #16]
 8001f86:	9307      	str	r3, [sp, #28]
 8001f88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001f8c:	931a      	str	r3, [sp, #104]	; 0x68
 8001f8e:	4654      	mov	r4, sl
 8001f90:	2205      	movs	r2, #5
 8001f92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f96:	4858      	ldr	r0, [pc, #352]	; (80020f8 <_vfiprintf_r+0x24c>)
 8001f98:	f7fe f922 	bl	80001e0 <memchr>
 8001f9c:	9a04      	ldr	r2, [sp, #16]
 8001f9e:	b9d8      	cbnz	r0, 8001fd8 <_vfiprintf_r+0x12c>
 8001fa0:	06d1      	lsls	r1, r2, #27
 8001fa2:	bf44      	itt	mi
 8001fa4:	2320      	movmi	r3, #32
 8001fa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001faa:	0713      	lsls	r3, r2, #28
 8001fac:	bf44      	itt	mi
 8001fae:	232b      	movmi	r3, #43	; 0x2b
 8001fb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001fb4:	f89a 3000 	ldrb.w	r3, [sl]
 8001fb8:	2b2a      	cmp	r3, #42	; 0x2a
 8001fba:	d015      	beq.n	8001fe8 <_vfiprintf_r+0x13c>
 8001fbc:	9a07      	ldr	r2, [sp, #28]
 8001fbe:	4654      	mov	r4, sl
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f04f 0c0a 	mov.w	ip, #10
 8001fc6:	4621      	mov	r1, r4
 8001fc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fcc:	3b30      	subs	r3, #48	; 0x30
 8001fce:	2b09      	cmp	r3, #9
 8001fd0:	d94e      	bls.n	8002070 <_vfiprintf_r+0x1c4>
 8001fd2:	b1b0      	cbz	r0, 8002002 <_vfiprintf_r+0x156>
 8001fd4:	9207      	str	r2, [sp, #28]
 8001fd6:	e014      	b.n	8002002 <_vfiprintf_r+0x156>
 8001fd8:	eba0 0308 	sub.w	r3, r0, r8
 8001fdc:	fa09 f303 	lsl.w	r3, r9, r3
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	9304      	str	r3, [sp, #16]
 8001fe4:	46a2      	mov	sl, r4
 8001fe6:	e7d2      	b.n	8001f8e <_vfiprintf_r+0xe2>
 8001fe8:	9b03      	ldr	r3, [sp, #12]
 8001fea:	1d19      	adds	r1, r3, #4
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	9103      	str	r1, [sp, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bfbb      	ittet	lt
 8001ff4:	425b      	neglt	r3, r3
 8001ff6:	f042 0202 	orrlt.w	r2, r2, #2
 8001ffa:	9307      	strge	r3, [sp, #28]
 8001ffc:	9307      	strlt	r3, [sp, #28]
 8001ffe:	bfb8      	it	lt
 8002000:	9204      	strlt	r2, [sp, #16]
 8002002:	7823      	ldrb	r3, [r4, #0]
 8002004:	2b2e      	cmp	r3, #46	; 0x2e
 8002006:	d10c      	bne.n	8002022 <_vfiprintf_r+0x176>
 8002008:	7863      	ldrb	r3, [r4, #1]
 800200a:	2b2a      	cmp	r3, #42	; 0x2a
 800200c:	d135      	bne.n	800207a <_vfiprintf_r+0x1ce>
 800200e:	9b03      	ldr	r3, [sp, #12]
 8002010:	1d1a      	adds	r2, r3, #4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	9203      	str	r2, [sp, #12]
 8002016:	2b00      	cmp	r3, #0
 8002018:	bfb8      	it	lt
 800201a:	f04f 33ff 	movlt.w	r3, #4294967295
 800201e:	3402      	adds	r4, #2
 8002020:	9305      	str	r3, [sp, #20]
 8002022:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002108 <_vfiprintf_r+0x25c>
 8002026:	7821      	ldrb	r1, [r4, #0]
 8002028:	2203      	movs	r2, #3
 800202a:	4650      	mov	r0, sl
 800202c:	f7fe f8d8 	bl	80001e0 <memchr>
 8002030:	b140      	cbz	r0, 8002044 <_vfiprintf_r+0x198>
 8002032:	2340      	movs	r3, #64	; 0x40
 8002034:	eba0 000a 	sub.w	r0, r0, sl
 8002038:	fa03 f000 	lsl.w	r0, r3, r0
 800203c:	9b04      	ldr	r3, [sp, #16]
 800203e:	4303      	orrs	r3, r0
 8002040:	3401      	adds	r4, #1
 8002042:	9304      	str	r3, [sp, #16]
 8002044:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002048:	482c      	ldr	r0, [pc, #176]	; (80020fc <_vfiprintf_r+0x250>)
 800204a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800204e:	2206      	movs	r2, #6
 8002050:	f7fe f8c6 	bl	80001e0 <memchr>
 8002054:	2800      	cmp	r0, #0
 8002056:	d03f      	beq.n	80020d8 <_vfiprintf_r+0x22c>
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <_vfiprintf_r+0x254>)
 800205a:	bb1b      	cbnz	r3, 80020a4 <_vfiprintf_r+0x1f8>
 800205c:	9b03      	ldr	r3, [sp, #12]
 800205e:	3307      	adds	r3, #7
 8002060:	f023 0307 	bic.w	r3, r3, #7
 8002064:	3308      	adds	r3, #8
 8002066:	9303      	str	r3, [sp, #12]
 8002068:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800206a:	443b      	add	r3, r7
 800206c:	9309      	str	r3, [sp, #36]	; 0x24
 800206e:	e767      	b.n	8001f40 <_vfiprintf_r+0x94>
 8002070:	fb0c 3202 	mla	r2, ip, r2, r3
 8002074:	460c      	mov	r4, r1
 8002076:	2001      	movs	r0, #1
 8002078:	e7a5      	b.n	8001fc6 <_vfiprintf_r+0x11a>
 800207a:	2300      	movs	r3, #0
 800207c:	3401      	adds	r4, #1
 800207e:	9305      	str	r3, [sp, #20]
 8002080:	4619      	mov	r1, r3
 8002082:	f04f 0c0a 	mov.w	ip, #10
 8002086:	4620      	mov	r0, r4
 8002088:	f810 2b01 	ldrb.w	r2, [r0], #1
 800208c:	3a30      	subs	r2, #48	; 0x30
 800208e:	2a09      	cmp	r2, #9
 8002090:	d903      	bls.n	800209a <_vfiprintf_r+0x1ee>
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0c5      	beq.n	8002022 <_vfiprintf_r+0x176>
 8002096:	9105      	str	r1, [sp, #20]
 8002098:	e7c3      	b.n	8002022 <_vfiprintf_r+0x176>
 800209a:	fb0c 2101 	mla	r1, ip, r1, r2
 800209e:	4604      	mov	r4, r0
 80020a0:	2301      	movs	r3, #1
 80020a2:	e7f0      	b.n	8002086 <_vfiprintf_r+0x1da>
 80020a4:	ab03      	add	r3, sp, #12
 80020a6:	9300      	str	r3, [sp, #0]
 80020a8:	462a      	mov	r2, r5
 80020aa:	4b16      	ldr	r3, [pc, #88]	; (8002104 <_vfiprintf_r+0x258>)
 80020ac:	a904      	add	r1, sp, #16
 80020ae:	4630      	mov	r0, r6
 80020b0:	f3af 8000 	nop.w
 80020b4:	4607      	mov	r7, r0
 80020b6:	1c78      	adds	r0, r7, #1
 80020b8:	d1d6      	bne.n	8002068 <_vfiprintf_r+0x1bc>
 80020ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80020bc:	07d9      	lsls	r1, r3, #31
 80020be:	d405      	bmi.n	80020cc <_vfiprintf_r+0x220>
 80020c0:	89ab      	ldrh	r3, [r5, #12]
 80020c2:	059a      	lsls	r2, r3, #22
 80020c4:	d402      	bmi.n	80020cc <_vfiprintf_r+0x220>
 80020c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80020c8:	f000 fc45 	bl	8002956 <__retarget_lock_release_recursive>
 80020cc:	89ab      	ldrh	r3, [r5, #12]
 80020ce:	065b      	lsls	r3, r3, #25
 80020d0:	f53f af12 	bmi.w	8001ef8 <_vfiprintf_r+0x4c>
 80020d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80020d6:	e711      	b.n	8001efc <_vfiprintf_r+0x50>
 80020d8:	ab03      	add	r3, sp, #12
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	462a      	mov	r2, r5
 80020de:	4b09      	ldr	r3, [pc, #36]	; (8002104 <_vfiprintf_r+0x258>)
 80020e0:	a904      	add	r1, sp, #16
 80020e2:	4630      	mov	r0, r6
 80020e4:	f000 f880 	bl	80021e8 <_printf_i>
 80020e8:	e7e4      	b.n	80020b4 <_vfiprintf_r+0x208>
 80020ea:	bf00      	nop
 80020ec:	08002d5c 	.word	0x08002d5c
 80020f0:	08002d7c 	.word	0x08002d7c
 80020f4:	08002d3c 	.word	0x08002d3c
 80020f8:	08002d06 	.word	0x08002d06
 80020fc:	08002d10 	.word	0x08002d10
 8002100:	00000000 	.word	0x00000000
 8002104:	08001e87 	.word	0x08001e87
 8002108:	08002d0c 	.word	0x08002d0c

0800210c <_printf_common>:
 800210c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002110:	4616      	mov	r6, r2
 8002112:	4699      	mov	r9, r3
 8002114:	688a      	ldr	r2, [r1, #8]
 8002116:	690b      	ldr	r3, [r1, #16]
 8002118:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800211c:	4293      	cmp	r3, r2
 800211e:	bfb8      	it	lt
 8002120:	4613      	movlt	r3, r2
 8002122:	6033      	str	r3, [r6, #0]
 8002124:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002128:	4607      	mov	r7, r0
 800212a:	460c      	mov	r4, r1
 800212c:	b10a      	cbz	r2, 8002132 <_printf_common+0x26>
 800212e:	3301      	adds	r3, #1
 8002130:	6033      	str	r3, [r6, #0]
 8002132:	6823      	ldr	r3, [r4, #0]
 8002134:	0699      	lsls	r1, r3, #26
 8002136:	bf42      	ittt	mi
 8002138:	6833      	ldrmi	r3, [r6, #0]
 800213a:	3302      	addmi	r3, #2
 800213c:	6033      	strmi	r3, [r6, #0]
 800213e:	6825      	ldr	r5, [r4, #0]
 8002140:	f015 0506 	ands.w	r5, r5, #6
 8002144:	d106      	bne.n	8002154 <_printf_common+0x48>
 8002146:	f104 0a19 	add.w	sl, r4, #25
 800214a:	68e3      	ldr	r3, [r4, #12]
 800214c:	6832      	ldr	r2, [r6, #0]
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	42ab      	cmp	r3, r5
 8002152:	dc26      	bgt.n	80021a2 <_printf_common+0x96>
 8002154:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002158:	1e13      	subs	r3, r2, #0
 800215a:	6822      	ldr	r2, [r4, #0]
 800215c:	bf18      	it	ne
 800215e:	2301      	movne	r3, #1
 8002160:	0692      	lsls	r2, r2, #26
 8002162:	d42b      	bmi.n	80021bc <_printf_common+0xb0>
 8002164:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002168:	4649      	mov	r1, r9
 800216a:	4638      	mov	r0, r7
 800216c:	47c0      	blx	r8
 800216e:	3001      	adds	r0, #1
 8002170:	d01e      	beq.n	80021b0 <_printf_common+0xa4>
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	68e5      	ldr	r5, [r4, #12]
 8002176:	6832      	ldr	r2, [r6, #0]
 8002178:	f003 0306 	and.w	r3, r3, #6
 800217c:	2b04      	cmp	r3, #4
 800217e:	bf08      	it	eq
 8002180:	1aad      	subeq	r5, r5, r2
 8002182:	68a3      	ldr	r3, [r4, #8]
 8002184:	6922      	ldr	r2, [r4, #16]
 8002186:	bf0c      	ite	eq
 8002188:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800218c:	2500      	movne	r5, #0
 800218e:	4293      	cmp	r3, r2
 8002190:	bfc4      	itt	gt
 8002192:	1a9b      	subgt	r3, r3, r2
 8002194:	18ed      	addgt	r5, r5, r3
 8002196:	2600      	movs	r6, #0
 8002198:	341a      	adds	r4, #26
 800219a:	42b5      	cmp	r5, r6
 800219c:	d11a      	bne.n	80021d4 <_printf_common+0xc8>
 800219e:	2000      	movs	r0, #0
 80021a0:	e008      	b.n	80021b4 <_printf_common+0xa8>
 80021a2:	2301      	movs	r3, #1
 80021a4:	4652      	mov	r2, sl
 80021a6:	4649      	mov	r1, r9
 80021a8:	4638      	mov	r0, r7
 80021aa:	47c0      	blx	r8
 80021ac:	3001      	adds	r0, #1
 80021ae:	d103      	bne.n	80021b8 <_printf_common+0xac>
 80021b0:	f04f 30ff 	mov.w	r0, #4294967295
 80021b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80021b8:	3501      	adds	r5, #1
 80021ba:	e7c6      	b.n	800214a <_printf_common+0x3e>
 80021bc:	18e1      	adds	r1, r4, r3
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	2030      	movs	r0, #48	; 0x30
 80021c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80021c6:	4422      	add	r2, r4
 80021c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80021cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80021d0:	3302      	adds	r3, #2
 80021d2:	e7c7      	b.n	8002164 <_printf_common+0x58>
 80021d4:	2301      	movs	r3, #1
 80021d6:	4622      	mov	r2, r4
 80021d8:	4649      	mov	r1, r9
 80021da:	4638      	mov	r0, r7
 80021dc:	47c0      	blx	r8
 80021de:	3001      	adds	r0, #1
 80021e0:	d0e6      	beq.n	80021b0 <_printf_common+0xa4>
 80021e2:	3601      	adds	r6, #1
 80021e4:	e7d9      	b.n	800219a <_printf_common+0x8e>
	...

080021e8 <_printf_i>:
 80021e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021ec:	7e0f      	ldrb	r7, [r1, #24]
 80021ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021f0:	2f78      	cmp	r7, #120	; 0x78
 80021f2:	4691      	mov	r9, r2
 80021f4:	4680      	mov	r8, r0
 80021f6:	460c      	mov	r4, r1
 80021f8:	469a      	mov	sl, r3
 80021fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80021fe:	d807      	bhi.n	8002210 <_printf_i+0x28>
 8002200:	2f62      	cmp	r7, #98	; 0x62
 8002202:	d80a      	bhi.n	800221a <_printf_i+0x32>
 8002204:	2f00      	cmp	r7, #0
 8002206:	f000 80d8 	beq.w	80023ba <_printf_i+0x1d2>
 800220a:	2f58      	cmp	r7, #88	; 0x58
 800220c:	f000 80a3 	beq.w	8002356 <_printf_i+0x16e>
 8002210:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002218:	e03a      	b.n	8002290 <_printf_i+0xa8>
 800221a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800221e:	2b15      	cmp	r3, #21
 8002220:	d8f6      	bhi.n	8002210 <_printf_i+0x28>
 8002222:	a101      	add	r1, pc, #4	; (adr r1, 8002228 <_printf_i+0x40>)
 8002224:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002228:	08002281 	.word	0x08002281
 800222c:	08002295 	.word	0x08002295
 8002230:	08002211 	.word	0x08002211
 8002234:	08002211 	.word	0x08002211
 8002238:	08002211 	.word	0x08002211
 800223c:	08002211 	.word	0x08002211
 8002240:	08002295 	.word	0x08002295
 8002244:	08002211 	.word	0x08002211
 8002248:	08002211 	.word	0x08002211
 800224c:	08002211 	.word	0x08002211
 8002250:	08002211 	.word	0x08002211
 8002254:	080023a1 	.word	0x080023a1
 8002258:	080022c5 	.word	0x080022c5
 800225c:	08002383 	.word	0x08002383
 8002260:	08002211 	.word	0x08002211
 8002264:	08002211 	.word	0x08002211
 8002268:	080023c3 	.word	0x080023c3
 800226c:	08002211 	.word	0x08002211
 8002270:	080022c5 	.word	0x080022c5
 8002274:	08002211 	.word	0x08002211
 8002278:	08002211 	.word	0x08002211
 800227c:	0800238b 	.word	0x0800238b
 8002280:	682b      	ldr	r3, [r5, #0]
 8002282:	1d1a      	adds	r2, r3, #4
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	602a      	str	r2, [r5, #0]
 8002288:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800228c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002290:	2301      	movs	r3, #1
 8002292:	e0a3      	b.n	80023dc <_printf_i+0x1f4>
 8002294:	6820      	ldr	r0, [r4, #0]
 8002296:	6829      	ldr	r1, [r5, #0]
 8002298:	0606      	lsls	r6, r0, #24
 800229a:	f101 0304 	add.w	r3, r1, #4
 800229e:	d50a      	bpl.n	80022b6 <_printf_i+0xce>
 80022a0:	680e      	ldr	r6, [r1, #0]
 80022a2:	602b      	str	r3, [r5, #0]
 80022a4:	2e00      	cmp	r6, #0
 80022a6:	da03      	bge.n	80022b0 <_printf_i+0xc8>
 80022a8:	232d      	movs	r3, #45	; 0x2d
 80022aa:	4276      	negs	r6, r6
 80022ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022b0:	485e      	ldr	r0, [pc, #376]	; (800242c <_printf_i+0x244>)
 80022b2:	230a      	movs	r3, #10
 80022b4:	e019      	b.n	80022ea <_printf_i+0x102>
 80022b6:	680e      	ldr	r6, [r1, #0]
 80022b8:	602b      	str	r3, [r5, #0]
 80022ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022be:	bf18      	it	ne
 80022c0:	b236      	sxthne	r6, r6
 80022c2:	e7ef      	b.n	80022a4 <_printf_i+0xbc>
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	6820      	ldr	r0, [r4, #0]
 80022c8:	1d19      	adds	r1, r3, #4
 80022ca:	6029      	str	r1, [r5, #0]
 80022cc:	0601      	lsls	r1, r0, #24
 80022ce:	d501      	bpl.n	80022d4 <_printf_i+0xec>
 80022d0:	681e      	ldr	r6, [r3, #0]
 80022d2:	e002      	b.n	80022da <_printf_i+0xf2>
 80022d4:	0646      	lsls	r6, r0, #25
 80022d6:	d5fb      	bpl.n	80022d0 <_printf_i+0xe8>
 80022d8:	881e      	ldrh	r6, [r3, #0]
 80022da:	4854      	ldr	r0, [pc, #336]	; (800242c <_printf_i+0x244>)
 80022dc:	2f6f      	cmp	r7, #111	; 0x6f
 80022de:	bf0c      	ite	eq
 80022e0:	2308      	moveq	r3, #8
 80022e2:	230a      	movne	r3, #10
 80022e4:	2100      	movs	r1, #0
 80022e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80022ea:	6865      	ldr	r5, [r4, #4]
 80022ec:	60a5      	str	r5, [r4, #8]
 80022ee:	2d00      	cmp	r5, #0
 80022f0:	bfa2      	ittt	ge
 80022f2:	6821      	ldrge	r1, [r4, #0]
 80022f4:	f021 0104 	bicge.w	r1, r1, #4
 80022f8:	6021      	strge	r1, [r4, #0]
 80022fa:	b90e      	cbnz	r6, 8002300 <_printf_i+0x118>
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	d04d      	beq.n	800239c <_printf_i+0x1b4>
 8002300:	4615      	mov	r5, r2
 8002302:	fbb6 f1f3 	udiv	r1, r6, r3
 8002306:	fb03 6711 	mls	r7, r3, r1, r6
 800230a:	5dc7      	ldrb	r7, [r0, r7]
 800230c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002310:	4637      	mov	r7, r6
 8002312:	42bb      	cmp	r3, r7
 8002314:	460e      	mov	r6, r1
 8002316:	d9f4      	bls.n	8002302 <_printf_i+0x11a>
 8002318:	2b08      	cmp	r3, #8
 800231a:	d10b      	bne.n	8002334 <_printf_i+0x14c>
 800231c:	6823      	ldr	r3, [r4, #0]
 800231e:	07de      	lsls	r6, r3, #31
 8002320:	d508      	bpl.n	8002334 <_printf_i+0x14c>
 8002322:	6923      	ldr	r3, [r4, #16]
 8002324:	6861      	ldr	r1, [r4, #4]
 8002326:	4299      	cmp	r1, r3
 8002328:	bfde      	ittt	le
 800232a:	2330      	movle	r3, #48	; 0x30
 800232c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002330:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002334:	1b52      	subs	r2, r2, r5
 8002336:	6122      	str	r2, [r4, #16]
 8002338:	f8cd a000 	str.w	sl, [sp]
 800233c:	464b      	mov	r3, r9
 800233e:	aa03      	add	r2, sp, #12
 8002340:	4621      	mov	r1, r4
 8002342:	4640      	mov	r0, r8
 8002344:	f7ff fee2 	bl	800210c <_printf_common>
 8002348:	3001      	adds	r0, #1
 800234a:	d14c      	bne.n	80023e6 <_printf_i+0x1fe>
 800234c:	f04f 30ff 	mov.w	r0, #4294967295
 8002350:	b004      	add	sp, #16
 8002352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002356:	4835      	ldr	r0, [pc, #212]	; (800242c <_printf_i+0x244>)
 8002358:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800235c:	6829      	ldr	r1, [r5, #0]
 800235e:	6823      	ldr	r3, [r4, #0]
 8002360:	f851 6b04 	ldr.w	r6, [r1], #4
 8002364:	6029      	str	r1, [r5, #0]
 8002366:	061d      	lsls	r5, r3, #24
 8002368:	d514      	bpl.n	8002394 <_printf_i+0x1ac>
 800236a:	07df      	lsls	r7, r3, #31
 800236c:	bf44      	itt	mi
 800236e:	f043 0320 	orrmi.w	r3, r3, #32
 8002372:	6023      	strmi	r3, [r4, #0]
 8002374:	b91e      	cbnz	r6, 800237e <_printf_i+0x196>
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	f023 0320 	bic.w	r3, r3, #32
 800237c:	6023      	str	r3, [r4, #0]
 800237e:	2310      	movs	r3, #16
 8002380:	e7b0      	b.n	80022e4 <_printf_i+0xfc>
 8002382:	6823      	ldr	r3, [r4, #0]
 8002384:	f043 0320 	orr.w	r3, r3, #32
 8002388:	6023      	str	r3, [r4, #0]
 800238a:	2378      	movs	r3, #120	; 0x78
 800238c:	4828      	ldr	r0, [pc, #160]	; (8002430 <_printf_i+0x248>)
 800238e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002392:	e7e3      	b.n	800235c <_printf_i+0x174>
 8002394:	0659      	lsls	r1, r3, #25
 8002396:	bf48      	it	mi
 8002398:	b2b6      	uxthmi	r6, r6
 800239a:	e7e6      	b.n	800236a <_printf_i+0x182>
 800239c:	4615      	mov	r5, r2
 800239e:	e7bb      	b.n	8002318 <_printf_i+0x130>
 80023a0:	682b      	ldr	r3, [r5, #0]
 80023a2:	6826      	ldr	r6, [r4, #0]
 80023a4:	6961      	ldr	r1, [r4, #20]
 80023a6:	1d18      	adds	r0, r3, #4
 80023a8:	6028      	str	r0, [r5, #0]
 80023aa:	0635      	lsls	r5, r6, #24
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	d501      	bpl.n	80023b4 <_printf_i+0x1cc>
 80023b0:	6019      	str	r1, [r3, #0]
 80023b2:	e002      	b.n	80023ba <_printf_i+0x1d2>
 80023b4:	0670      	lsls	r0, r6, #25
 80023b6:	d5fb      	bpl.n	80023b0 <_printf_i+0x1c8>
 80023b8:	8019      	strh	r1, [r3, #0]
 80023ba:	2300      	movs	r3, #0
 80023bc:	6123      	str	r3, [r4, #16]
 80023be:	4615      	mov	r5, r2
 80023c0:	e7ba      	b.n	8002338 <_printf_i+0x150>
 80023c2:	682b      	ldr	r3, [r5, #0]
 80023c4:	1d1a      	adds	r2, r3, #4
 80023c6:	602a      	str	r2, [r5, #0]
 80023c8:	681d      	ldr	r5, [r3, #0]
 80023ca:	6862      	ldr	r2, [r4, #4]
 80023cc:	2100      	movs	r1, #0
 80023ce:	4628      	mov	r0, r5
 80023d0:	f7fd ff06 	bl	80001e0 <memchr>
 80023d4:	b108      	cbz	r0, 80023da <_printf_i+0x1f2>
 80023d6:	1b40      	subs	r0, r0, r5
 80023d8:	6060      	str	r0, [r4, #4]
 80023da:	6863      	ldr	r3, [r4, #4]
 80023dc:	6123      	str	r3, [r4, #16]
 80023de:	2300      	movs	r3, #0
 80023e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80023e4:	e7a8      	b.n	8002338 <_printf_i+0x150>
 80023e6:	6923      	ldr	r3, [r4, #16]
 80023e8:	462a      	mov	r2, r5
 80023ea:	4649      	mov	r1, r9
 80023ec:	4640      	mov	r0, r8
 80023ee:	47d0      	blx	sl
 80023f0:	3001      	adds	r0, #1
 80023f2:	d0ab      	beq.n	800234c <_printf_i+0x164>
 80023f4:	6823      	ldr	r3, [r4, #0]
 80023f6:	079b      	lsls	r3, r3, #30
 80023f8:	d413      	bmi.n	8002422 <_printf_i+0x23a>
 80023fa:	68e0      	ldr	r0, [r4, #12]
 80023fc:	9b03      	ldr	r3, [sp, #12]
 80023fe:	4298      	cmp	r0, r3
 8002400:	bfb8      	it	lt
 8002402:	4618      	movlt	r0, r3
 8002404:	e7a4      	b.n	8002350 <_printf_i+0x168>
 8002406:	2301      	movs	r3, #1
 8002408:	4632      	mov	r2, r6
 800240a:	4649      	mov	r1, r9
 800240c:	4640      	mov	r0, r8
 800240e:	47d0      	blx	sl
 8002410:	3001      	adds	r0, #1
 8002412:	d09b      	beq.n	800234c <_printf_i+0x164>
 8002414:	3501      	adds	r5, #1
 8002416:	68e3      	ldr	r3, [r4, #12]
 8002418:	9903      	ldr	r1, [sp, #12]
 800241a:	1a5b      	subs	r3, r3, r1
 800241c:	42ab      	cmp	r3, r5
 800241e:	dcf2      	bgt.n	8002406 <_printf_i+0x21e>
 8002420:	e7eb      	b.n	80023fa <_printf_i+0x212>
 8002422:	2500      	movs	r5, #0
 8002424:	f104 0619 	add.w	r6, r4, #25
 8002428:	e7f5      	b.n	8002416 <_printf_i+0x22e>
 800242a:	bf00      	nop
 800242c:	08002d17 	.word	0x08002d17
 8002430:	08002d28 	.word	0x08002d28

08002434 <_sbrk_r>:
 8002434:	b538      	push	{r3, r4, r5, lr}
 8002436:	4d06      	ldr	r5, [pc, #24]	; (8002450 <_sbrk_r+0x1c>)
 8002438:	2300      	movs	r3, #0
 800243a:	4604      	mov	r4, r0
 800243c:	4608      	mov	r0, r1
 800243e:	602b      	str	r3, [r5, #0]
 8002440:	f7fe fb02 	bl	8000a48 <_sbrk>
 8002444:	1c43      	adds	r3, r0, #1
 8002446:	d102      	bne.n	800244e <_sbrk_r+0x1a>
 8002448:	682b      	ldr	r3, [r5, #0]
 800244a:	b103      	cbz	r3, 800244e <_sbrk_r+0x1a>
 800244c:	6023      	str	r3, [r4, #0]
 800244e:	bd38      	pop	{r3, r4, r5, pc}
 8002450:	2000009c 	.word	0x2000009c

08002454 <__swbuf_r>:
 8002454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002456:	460e      	mov	r6, r1
 8002458:	4614      	mov	r4, r2
 800245a:	4605      	mov	r5, r0
 800245c:	b118      	cbz	r0, 8002466 <__swbuf_r+0x12>
 800245e:	6983      	ldr	r3, [r0, #24]
 8002460:	b90b      	cbnz	r3, 8002466 <__swbuf_r+0x12>
 8002462:	f000 f9d9 	bl	8002818 <__sinit>
 8002466:	4b21      	ldr	r3, [pc, #132]	; (80024ec <__swbuf_r+0x98>)
 8002468:	429c      	cmp	r4, r3
 800246a:	d12b      	bne.n	80024c4 <__swbuf_r+0x70>
 800246c:	686c      	ldr	r4, [r5, #4]
 800246e:	69a3      	ldr	r3, [r4, #24]
 8002470:	60a3      	str	r3, [r4, #8]
 8002472:	89a3      	ldrh	r3, [r4, #12]
 8002474:	071a      	lsls	r2, r3, #28
 8002476:	d52f      	bpl.n	80024d8 <__swbuf_r+0x84>
 8002478:	6923      	ldr	r3, [r4, #16]
 800247a:	b36b      	cbz	r3, 80024d8 <__swbuf_r+0x84>
 800247c:	6923      	ldr	r3, [r4, #16]
 800247e:	6820      	ldr	r0, [r4, #0]
 8002480:	1ac0      	subs	r0, r0, r3
 8002482:	6963      	ldr	r3, [r4, #20]
 8002484:	b2f6      	uxtb	r6, r6
 8002486:	4283      	cmp	r3, r0
 8002488:	4637      	mov	r7, r6
 800248a:	dc04      	bgt.n	8002496 <__swbuf_r+0x42>
 800248c:	4621      	mov	r1, r4
 800248e:	4628      	mov	r0, r5
 8002490:	f000 f92e 	bl	80026f0 <_fflush_r>
 8002494:	bb30      	cbnz	r0, 80024e4 <__swbuf_r+0x90>
 8002496:	68a3      	ldr	r3, [r4, #8]
 8002498:	3b01      	subs	r3, #1
 800249a:	60a3      	str	r3, [r4, #8]
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	6022      	str	r2, [r4, #0]
 80024a2:	701e      	strb	r6, [r3, #0]
 80024a4:	6963      	ldr	r3, [r4, #20]
 80024a6:	3001      	adds	r0, #1
 80024a8:	4283      	cmp	r3, r0
 80024aa:	d004      	beq.n	80024b6 <__swbuf_r+0x62>
 80024ac:	89a3      	ldrh	r3, [r4, #12]
 80024ae:	07db      	lsls	r3, r3, #31
 80024b0:	d506      	bpl.n	80024c0 <__swbuf_r+0x6c>
 80024b2:	2e0a      	cmp	r6, #10
 80024b4:	d104      	bne.n	80024c0 <__swbuf_r+0x6c>
 80024b6:	4621      	mov	r1, r4
 80024b8:	4628      	mov	r0, r5
 80024ba:	f000 f919 	bl	80026f0 <_fflush_r>
 80024be:	b988      	cbnz	r0, 80024e4 <__swbuf_r+0x90>
 80024c0:	4638      	mov	r0, r7
 80024c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80024c4:	4b0a      	ldr	r3, [pc, #40]	; (80024f0 <__swbuf_r+0x9c>)
 80024c6:	429c      	cmp	r4, r3
 80024c8:	d101      	bne.n	80024ce <__swbuf_r+0x7a>
 80024ca:	68ac      	ldr	r4, [r5, #8]
 80024cc:	e7cf      	b.n	800246e <__swbuf_r+0x1a>
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <__swbuf_r+0xa0>)
 80024d0:	429c      	cmp	r4, r3
 80024d2:	bf08      	it	eq
 80024d4:	68ec      	ldreq	r4, [r5, #12]
 80024d6:	e7ca      	b.n	800246e <__swbuf_r+0x1a>
 80024d8:	4621      	mov	r1, r4
 80024da:	4628      	mov	r0, r5
 80024dc:	f000 f80c 	bl	80024f8 <__swsetup_r>
 80024e0:	2800      	cmp	r0, #0
 80024e2:	d0cb      	beq.n	800247c <__swbuf_r+0x28>
 80024e4:	f04f 37ff 	mov.w	r7, #4294967295
 80024e8:	e7ea      	b.n	80024c0 <__swbuf_r+0x6c>
 80024ea:	bf00      	nop
 80024ec:	08002d5c 	.word	0x08002d5c
 80024f0:	08002d7c 	.word	0x08002d7c
 80024f4:	08002d3c 	.word	0x08002d3c

080024f8 <__swsetup_r>:
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <__swsetup_r+0xcc>)
 80024fa:	b570      	push	{r4, r5, r6, lr}
 80024fc:	681d      	ldr	r5, [r3, #0]
 80024fe:	4606      	mov	r6, r0
 8002500:	460c      	mov	r4, r1
 8002502:	b125      	cbz	r5, 800250e <__swsetup_r+0x16>
 8002504:	69ab      	ldr	r3, [r5, #24]
 8002506:	b913      	cbnz	r3, 800250e <__swsetup_r+0x16>
 8002508:	4628      	mov	r0, r5
 800250a:	f000 f985 	bl	8002818 <__sinit>
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <__swsetup_r+0xd0>)
 8002510:	429c      	cmp	r4, r3
 8002512:	d10f      	bne.n	8002534 <__swsetup_r+0x3c>
 8002514:	686c      	ldr	r4, [r5, #4]
 8002516:	89a3      	ldrh	r3, [r4, #12]
 8002518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800251c:	0719      	lsls	r1, r3, #28
 800251e:	d42c      	bmi.n	800257a <__swsetup_r+0x82>
 8002520:	06dd      	lsls	r5, r3, #27
 8002522:	d411      	bmi.n	8002548 <__swsetup_r+0x50>
 8002524:	2309      	movs	r3, #9
 8002526:	6033      	str	r3, [r6, #0]
 8002528:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800252c:	81a3      	strh	r3, [r4, #12]
 800252e:	f04f 30ff 	mov.w	r0, #4294967295
 8002532:	e03e      	b.n	80025b2 <__swsetup_r+0xba>
 8002534:	4b25      	ldr	r3, [pc, #148]	; (80025cc <__swsetup_r+0xd4>)
 8002536:	429c      	cmp	r4, r3
 8002538:	d101      	bne.n	800253e <__swsetup_r+0x46>
 800253a:	68ac      	ldr	r4, [r5, #8]
 800253c:	e7eb      	b.n	8002516 <__swsetup_r+0x1e>
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <__swsetup_r+0xd8>)
 8002540:	429c      	cmp	r4, r3
 8002542:	bf08      	it	eq
 8002544:	68ec      	ldreq	r4, [r5, #12]
 8002546:	e7e6      	b.n	8002516 <__swsetup_r+0x1e>
 8002548:	0758      	lsls	r0, r3, #29
 800254a:	d512      	bpl.n	8002572 <__swsetup_r+0x7a>
 800254c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800254e:	b141      	cbz	r1, 8002562 <__swsetup_r+0x6a>
 8002550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002554:	4299      	cmp	r1, r3
 8002556:	d002      	beq.n	800255e <__swsetup_r+0x66>
 8002558:	4630      	mov	r0, r6
 800255a:	f7ff fb9d 	bl	8001c98 <_free_r>
 800255e:	2300      	movs	r3, #0
 8002560:	6363      	str	r3, [r4, #52]	; 0x34
 8002562:	89a3      	ldrh	r3, [r4, #12]
 8002564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002568:	81a3      	strh	r3, [r4, #12]
 800256a:	2300      	movs	r3, #0
 800256c:	6063      	str	r3, [r4, #4]
 800256e:	6923      	ldr	r3, [r4, #16]
 8002570:	6023      	str	r3, [r4, #0]
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	f043 0308 	orr.w	r3, r3, #8
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	6923      	ldr	r3, [r4, #16]
 800257c:	b94b      	cbnz	r3, 8002592 <__swsetup_r+0x9a>
 800257e:	89a3      	ldrh	r3, [r4, #12]
 8002580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002588:	d003      	beq.n	8002592 <__swsetup_r+0x9a>
 800258a:	4621      	mov	r1, r4
 800258c:	4630      	mov	r0, r6
 800258e:	f000 fa09 	bl	80029a4 <__smakebuf_r>
 8002592:	89a0      	ldrh	r0, [r4, #12]
 8002594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002598:	f010 0301 	ands.w	r3, r0, #1
 800259c:	d00a      	beq.n	80025b4 <__swsetup_r+0xbc>
 800259e:	2300      	movs	r3, #0
 80025a0:	60a3      	str	r3, [r4, #8]
 80025a2:	6963      	ldr	r3, [r4, #20]
 80025a4:	425b      	negs	r3, r3
 80025a6:	61a3      	str	r3, [r4, #24]
 80025a8:	6923      	ldr	r3, [r4, #16]
 80025aa:	b943      	cbnz	r3, 80025be <__swsetup_r+0xc6>
 80025ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025b0:	d1ba      	bne.n	8002528 <__swsetup_r+0x30>
 80025b2:	bd70      	pop	{r4, r5, r6, pc}
 80025b4:	0781      	lsls	r1, r0, #30
 80025b6:	bf58      	it	pl
 80025b8:	6963      	ldrpl	r3, [r4, #20]
 80025ba:	60a3      	str	r3, [r4, #8]
 80025bc:	e7f4      	b.n	80025a8 <__swsetup_r+0xb0>
 80025be:	2000      	movs	r0, #0
 80025c0:	e7f7      	b.n	80025b2 <__swsetup_r+0xba>
 80025c2:	bf00      	nop
 80025c4:	2000000c 	.word	0x2000000c
 80025c8:	08002d5c 	.word	0x08002d5c
 80025cc:	08002d7c 	.word	0x08002d7c
 80025d0:	08002d3c 	.word	0x08002d3c

080025d4 <abort>:
 80025d4:	b508      	push	{r3, lr}
 80025d6:	2006      	movs	r0, #6
 80025d8:	f000 fa58 	bl	8002a8c <raise>
 80025dc:	2001      	movs	r0, #1
 80025de:	f7fe f9bb 	bl	8000958 <_exit>
	...

080025e4 <__sflush_r>:
 80025e4:	898a      	ldrh	r2, [r1, #12]
 80025e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025ea:	4605      	mov	r5, r0
 80025ec:	0710      	lsls	r0, r2, #28
 80025ee:	460c      	mov	r4, r1
 80025f0:	d458      	bmi.n	80026a4 <__sflush_r+0xc0>
 80025f2:	684b      	ldr	r3, [r1, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	dc05      	bgt.n	8002604 <__sflush_r+0x20>
 80025f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	dc02      	bgt.n	8002604 <__sflush_r+0x20>
 80025fe:	2000      	movs	r0, #0
 8002600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002606:	2e00      	cmp	r6, #0
 8002608:	d0f9      	beq.n	80025fe <__sflush_r+0x1a>
 800260a:	2300      	movs	r3, #0
 800260c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002610:	682f      	ldr	r7, [r5, #0]
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	d032      	beq.n	800267c <__sflush_r+0x98>
 8002616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002618:	89a3      	ldrh	r3, [r4, #12]
 800261a:	075a      	lsls	r2, r3, #29
 800261c:	d505      	bpl.n	800262a <__sflush_r+0x46>
 800261e:	6863      	ldr	r3, [r4, #4]
 8002620:	1ac0      	subs	r0, r0, r3
 8002622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002624:	b10b      	cbz	r3, 800262a <__sflush_r+0x46>
 8002626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002628:	1ac0      	subs	r0, r0, r3
 800262a:	2300      	movs	r3, #0
 800262c:	4602      	mov	r2, r0
 800262e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002630:	6a21      	ldr	r1, [r4, #32]
 8002632:	4628      	mov	r0, r5
 8002634:	47b0      	blx	r6
 8002636:	1c43      	adds	r3, r0, #1
 8002638:	89a3      	ldrh	r3, [r4, #12]
 800263a:	d106      	bne.n	800264a <__sflush_r+0x66>
 800263c:	6829      	ldr	r1, [r5, #0]
 800263e:	291d      	cmp	r1, #29
 8002640:	d82c      	bhi.n	800269c <__sflush_r+0xb8>
 8002642:	4a2a      	ldr	r2, [pc, #168]	; (80026ec <__sflush_r+0x108>)
 8002644:	40ca      	lsrs	r2, r1
 8002646:	07d6      	lsls	r6, r2, #31
 8002648:	d528      	bpl.n	800269c <__sflush_r+0xb8>
 800264a:	2200      	movs	r2, #0
 800264c:	6062      	str	r2, [r4, #4]
 800264e:	04d9      	lsls	r1, r3, #19
 8002650:	6922      	ldr	r2, [r4, #16]
 8002652:	6022      	str	r2, [r4, #0]
 8002654:	d504      	bpl.n	8002660 <__sflush_r+0x7c>
 8002656:	1c42      	adds	r2, r0, #1
 8002658:	d101      	bne.n	800265e <__sflush_r+0x7a>
 800265a:	682b      	ldr	r3, [r5, #0]
 800265c:	b903      	cbnz	r3, 8002660 <__sflush_r+0x7c>
 800265e:	6560      	str	r0, [r4, #84]	; 0x54
 8002660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002662:	602f      	str	r7, [r5, #0]
 8002664:	2900      	cmp	r1, #0
 8002666:	d0ca      	beq.n	80025fe <__sflush_r+0x1a>
 8002668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800266c:	4299      	cmp	r1, r3
 800266e:	d002      	beq.n	8002676 <__sflush_r+0x92>
 8002670:	4628      	mov	r0, r5
 8002672:	f7ff fb11 	bl	8001c98 <_free_r>
 8002676:	2000      	movs	r0, #0
 8002678:	6360      	str	r0, [r4, #52]	; 0x34
 800267a:	e7c1      	b.n	8002600 <__sflush_r+0x1c>
 800267c:	6a21      	ldr	r1, [r4, #32]
 800267e:	2301      	movs	r3, #1
 8002680:	4628      	mov	r0, r5
 8002682:	47b0      	blx	r6
 8002684:	1c41      	adds	r1, r0, #1
 8002686:	d1c7      	bne.n	8002618 <__sflush_r+0x34>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0c4      	beq.n	8002618 <__sflush_r+0x34>
 800268e:	2b1d      	cmp	r3, #29
 8002690:	d001      	beq.n	8002696 <__sflush_r+0xb2>
 8002692:	2b16      	cmp	r3, #22
 8002694:	d101      	bne.n	800269a <__sflush_r+0xb6>
 8002696:	602f      	str	r7, [r5, #0]
 8002698:	e7b1      	b.n	80025fe <__sflush_r+0x1a>
 800269a:	89a3      	ldrh	r3, [r4, #12]
 800269c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026a0:	81a3      	strh	r3, [r4, #12]
 80026a2:	e7ad      	b.n	8002600 <__sflush_r+0x1c>
 80026a4:	690f      	ldr	r7, [r1, #16]
 80026a6:	2f00      	cmp	r7, #0
 80026a8:	d0a9      	beq.n	80025fe <__sflush_r+0x1a>
 80026aa:	0793      	lsls	r3, r2, #30
 80026ac:	680e      	ldr	r6, [r1, #0]
 80026ae:	bf08      	it	eq
 80026b0:	694b      	ldreq	r3, [r1, #20]
 80026b2:	600f      	str	r7, [r1, #0]
 80026b4:	bf18      	it	ne
 80026b6:	2300      	movne	r3, #0
 80026b8:	eba6 0807 	sub.w	r8, r6, r7
 80026bc:	608b      	str	r3, [r1, #8]
 80026be:	f1b8 0f00 	cmp.w	r8, #0
 80026c2:	dd9c      	ble.n	80025fe <__sflush_r+0x1a>
 80026c4:	6a21      	ldr	r1, [r4, #32]
 80026c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80026c8:	4643      	mov	r3, r8
 80026ca:	463a      	mov	r2, r7
 80026cc:	4628      	mov	r0, r5
 80026ce:	47b0      	blx	r6
 80026d0:	2800      	cmp	r0, #0
 80026d2:	dc06      	bgt.n	80026e2 <__sflush_r+0xfe>
 80026d4:	89a3      	ldrh	r3, [r4, #12]
 80026d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026da:	81a3      	strh	r3, [r4, #12]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	e78e      	b.n	8002600 <__sflush_r+0x1c>
 80026e2:	4407      	add	r7, r0
 80026e4:	eba8 0800 	sub.w	r8, r8, r0
 80026e8:	e7e9      	b.n	80026be <__sflush_r+0xda>
 80026ea:	bf00      	nop
 80026ec:	20400001 	.word	0x20400001

080026f0 <_fflush_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	690b      	ldr	r3, [r1, #16]
 80026f4:	4605      	mov	r5, r0
 80026f6:	460c      	mov	r4, r1
 80026f8:	b913      	cbnz	r3, 8002700 <_fflush_r+0x10>
 80026fa:	2500      	movs	r5, #0
 80026fc:	4628      	mov	r0, r5
 80026fe:	bd38      	pop	{r3, r4, r5, pc}
 8002700:	b118      	cbz	r0, 800270a <_fflush_r+0x1a>
 8002702:	6983      	ldr	r3, [r0, #24]
 8002704:	b90b      	cbnz	r3, 800270a <_fflush_r+0x1a>
 8002706:	f000 f887 	bl	8002818 <__sinit>
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <_fflush_r+0x6c>)
 800270c:	429c      	cmp	r4, r3
 800270e:	d11b      	bne.n	8002748 <_fflush_r+0x58>
 8002710:	686c      	ldr	r4, [r5, #4]
 8002712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0ef      	beq.n	80026fa <_fflush_r+0xa>
 800271a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800271c:	07d0      	lsls	r0, r2, #31
 800271e:	d404      	bmi.n	800272a <_fflush_r+0x3a>
 8002720:	0599      	lsls	r1, r3, #22
 8002722:	d402      	bmi.n	800272a <_fflush_r+0x3a>
 8002724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002726:	f000 f915 	bl	8002954 <__retarget_lock_acquire_recursive>
 800272a:	4628      	mov	r0, r5
 800272c:	4621      	mov	r1, r4
 800272e:	f7ff ff59 	bl	80025e4 <__sflush_r>
 8002732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002734:	07da      	lsls	r2, r3, #31
 8002736:	4605      	mov	r5, r0
 8002738:	d4e0      	bmi.n	80026fc <_fflush_r+0xc>
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	059b      	lsls	r3, r3, #22
 800273e:	d4dd      	bmi.n	80026fc <_fflush_r+0xc>
 8002740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002742:	f000 f908 	bl	8002956 <__retarget_lock_release_recursive>
 8002746:	e7d9      	b.n	80026fc <_fflush_r+0xc>
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <_fflush_r+0x70>)
 800274a:	429c      	cmp	r4, r3
 800274c:	d101      	bne.n	8002752 <_fflush_r+0x62>
 800274e:	68ac      	ldr	r4, [r5, #8]
 8002750:	e7df      	b.n	8002712 <_fflush_r+0x22>
 8002752:	4b04      	ldr	r3, [pc, #16]	; (8002764 <_fflush_r+0x74>)
 8002754:	429c      	cmp	r4, r3
 8002756:	bf08      	it	eq
 8002758:	68ec      	ldreq	r4, [r5, #12]
 800275a:	e7da      	b.n	8002712 <_fflush_r+0x22>
 800275c:	08002d5c 	.word	0x08002d5c
 8002760:	08002d7c 	.word	0x08002d7c
 8002764:	08002d3c 	.word	0x08002d3c

08002768 <std>:
 8002768:	2300      	movs	r3, #0
 800276a:	b510      	push	{r4, lr}
 800276c:	4604      	mov	r4, r0
 800276e:	e9c0 3300 	strd	r3, r3, [r0]
 8002772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002776:	6083      	str	r3, [r0, #8]
 8002778:	8181      	strh	r1, [r0, #12]
 800277a:	6643      	str	r3, [r0, #100]	; 0x64
 800277c:	81c2      	strh	r2, [r0, #14]
 800277e:	6183      	str	r3, [r0, #24]
 8002780:	4619      	mov	r1, r3
 8002782:	2208      	movs	r2, #8
 8002784:	305c      	adds	r0, #92	; 0x5c
 8002786:	f7ff f9af 	bl	8001ae8 <memset>
 800278a:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <std+0x38>)
 800278c:	6263      	str	r3, [r4, #36]	; 0x24
 800278e:	4b05      	ldr	r3, [pc, #20]	; (80027a4 <std+0x3c>)
 8002790:	62a3      	str	r3, [r4, #40]	; 0x28
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <std+0x40>)
 8002794:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <std+0x44>)
 8002798:	6224      	str	r4, [r4, #32]
 800279a:	6323      	str	r3, [r4, #48]	; 0x30
 800279c:	bd10      	pop	{r4, pc}
 800279e:	bf00      	nop
 80027a0:	08002ac5 	.word	0x08002ac5
 80027a4:	08002ae7 	.word	0x08002ae7
 80027a8:	08002b1f 	.word	0x08002b1f
 80027ac:	08002b43 	.word	0x08002b43

080027b0 <_cleanup_r>:
 80027b0:	4901      	ldr	r1, [pc, #4]	; (80027b8 <_cleanup_r+0x8>)
 80027b2:	f000 b8af 	b.w	8002914 <_fwalk_reent>
 80027b6:	bf00      	nop
 80027b8:	080026f1 	.word	0x080026f1

080027bc <__sfmoreglue>:
 80027bc:	b570      	push	{r4, r5, r6, lr}
 80027be:	2268      	movs	r2, #104	; 0x68
 80027c0:	1e4d      	subs	r5, r1, #1
 80027c2:	4355      	muls	r5, r2
 80027c4:	460e      	mov	r6, r1
 80027c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80027ca:	f7ff fad1 	bl	8001d70 <_malloc_r>
 80027ce:	4604      	mov	r4, r0
 80027d0:	b140      	cbz	r0, 80027e4 <__sfmoreglue+0x28>
 80027d2:	2100      	movs	r1, #0
 80027d4:	e9c0 1600 	strd	r1, r6, [r0]
 80027d8:	300c      	adds	r0, #12
 80027da:	60a0      	str	r0, [r4, #8]
 80027dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80027e0:	f7ff f982 	bl	8001ae8 <memset>
 80027e4:	4620      	mov	r0, r4
 80027e6:	bd70      	pop	{r4, r5, r6, pc}

080027e8 <__sfp_lock_acquire>:
 80027e8:	4801      	ldr	r0, [pc, #4]	; (80027f0 <__sfp_lock_acquire+0x8>)
 80027ea:	f000 b8b3 	b.w	8002954 <__retarget_lock_acquire_recursive>
 80027ee:	bf00      	nop
 80027f0:	200000a1 	.word	0x200000a1

080027f4 <__sfp_lock_release>:
 80027f4:	4801      	ldr	r0, [pc, #4]	; (80027fc <__sfp_lock_release+0x8>)
 80027f6:	f000 b8ae 	b.w	8002956 <__retarget_lock_release_recursive>
 80027fa:	bf00      	nop
 80027fc:	200000a1 	.word	0x200000a1

08002800 <__sinit_lock_acquire>:
 8002800:	4801      	ldr	r0, [pc, #4]	; (8002808 <__sinit_lock_acquire+0x8>)
 8002802:	f000 b8a7 	b.w	8002954 <__retarget_lock_acquire_recursive>
 8002806:	bf00      	nop
 8002808:	200000a2 	.word	0x200000a2

0800280c <__sinit_lock_release>:
 800280c:	4801      	ldr	r0, [pc, #4]	; (8002814 <__sinit_lock_release+0x8>)
 800280e:	f000 b8a2 	b.w	8002956 <__retarget_lock_release_recursive>
 8002812:	bf00      	nop
 8002814:	200000a2 	.word	0x200000a2

08002818 <__sinit>:
 8002818:	b510      	push	{r4, lr}
 800281a:	4604      	mov	r4, r0
 800281c:	f7ff fff0 	bl	8002800 <__sinit_lock_acquire>
 8002820:	69a3      	ldr	r3, [r4, #24]
 8002822:	b11b      	cbz	r3, 800282c <__sinit+0x14>
 8002824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002828:	f7ff bff0 	b.w	800280c <__sinit_lock_release>
 800282c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002830:	6523      	str	r3, [r4, #80]	; 0x50
 8002832:	4b13      	ldr	r3, [pc, #76]	; (8002880 <__sinit+0x68>)
 8002834:	4a13      	ldr	r2, [pc, #76]	; (8002884 <__sinit+0x6c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	62a2      	str	r2, [r4, #40]	; 0x28
 800283a:	42a3      	cmp	r3, r4
 800283c:	bf04      	itt	eq
 800283e:	2301      	moveq	r3, #1
 8002840:	61a3      	streq	r3, [r4, #24]
 8002842:	4620      	mov	r0, r4
 8002844:	f000 f820 	bl	8002888 <__sfp>
 8002848:	6060      	str	r0, [r4, #4]
 800284a:	4620      	mov	r0, r4
 800284c:	f000 f81c 	bl	8002888 <__sfp>
 8002850:	60a0      	str	r0, [r4, #8]
 8002852:	4620      	mov	r0, r4
 8002854:	f000 f818 	bl	8002888 <__sfp>
 8002858:	2200      	movs	r2, #0
 800285a:	60e0      	str	r0, [r4, #12]
 800285c:	2104      	movs	r1, #4
 800285e:	6860      	ldr	r0, [r4, #4]
 8002860:	f7ff ff82 	bl	8002768 <std>
 8002864:	68a0      	ldr	r0, [r4, #8]
 8002866:	2201      	movs	r2, #1
 8002868:	2109      	movs	r1, #9
 800286a:	f7ff ff7d 	bl	8002768 <std>
 800286e:	68e0      	ldr	r0, [r4, #12]
 8002870:	2202      	movs	r2, #2
 8002872:	2112      	movs	r1, #18
 8002874:	f7ff ff78 	bl	8002768 <std>
 8002878:	2301      	movs	r3, #1
 800287a:	61a3      	str	r3, [r4, #24]
 800287c:	e7d2      	b.n	8002824 <__sinit+0xc>
 800287e:	bf00      	nop
 8002880:	08002c54 	.word	0x08002c54
 8002884:	080027b1 	.word	0x080027b1

08002888 <__sfp>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	4607      	mov	r7, r0
 800288c:	f7ff ffac 	bl	80027e8 <__sfp_lock_acquire>
 8002890:	4b1e      	ldr	r3, [pc, #120]	; (800290c <__sfp+0x84>)
 8002892:	681e      	ldr	r6, [r3, #0]
 8002894:	69b3      	ldr	r3, [r6, #24]
 8002896:	b913      	cbnz	r3, 800289e <__sfp+0x16>
 8002898:	4630      	mov	r0, r6
 800289a:	f7ff ffbd 	bl	8002818 <__sinit>
 800289e:	3648      	adds	r6, #72	; 0x48
 80028a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	d503      	bpl.n	80028b0 <__sfp+0x28>
 80028a8:	6833      	ldr	r3, [r6, #0]
 80028aa:	b30b      	cbz	r3, 80028f0 <__sfp+0x68>
 80028ac:	6836      	ldr	r6, [r6, #0]
 80028ae:	e7f7      	b.n	80028a0 <__sfp+0x18>
 80028b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028b4:	b9d5      	cbnz	r5, 80028ec <__sfp+0x64>
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <__sfp+0x88>)
 80028b8:	60e3      	str	r3, [r4, #12]
 80028ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028be:	6665      	str	r5, [r4, #100]	; 0x64
 80028c0:	f000 f847 	bl	8002952 <__retarget_lock_init_recursive>
 80028c4:	f7ff ff96 	bl	80027f4 <__sfp_lock_release>
 80028c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80028cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80028d0:	6025      	str	r5, [r4, #0]
 80028d2:	61a5      	str	r5, [r4, #24]
 80028d4:	2208      	movs	r2, #8
 80028d6:	4629      	mov	r1, r5
 80028d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80028dc:	f7ff f904 	bl	8001ae8 <memset>
 80028e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80028e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80028e8:	4620      	mov	r0, r4
 80028ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028ec:	3468      	adds	r4, #104	; 0x68
 80028ee:	e7d9      	b.n	80028a4 <__sfp+0x1c>
 80028f0:	2104      	movs	r1, #4
 80028f2:	4638      	mov	r0, r7
 80028f4:	f7ff ff62 	bl	80027bc <__sfmoreglue>
 80028f8:	4604      	mov	r4, r0
 80028fa:	6030      	str	r0, [r6, #0]
 80028fc:	2800      	cmp	r0, #0
 80028fe:	d1d5      	bne.n	80028ac <__sfp+0x24>
 8002900:	f7ff ff78 	bl	80027f4 <__sfp_lock_release>
 8002904:	230c      	movs	r3, #12
 8002906:	603b      	str	r3, [r7, #0]
 8002908:	e7ee      	b.n	80028e8 <__sfp+0x60>
 800290a:	bf00      	nop
 800290c:	08002c54 	.word	0x08002c54
 8002910:	ffff0001 	.word	0xffff0001

08002914 <_fwalk_reent>:
 8002914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002918:	4606      	mov	r6, r0
 800291a:	4688      	mov	r8, r1
 800291c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002920:	2700      	movs	r7, #0
 8002922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002926:	f1b9 0901 	subs.w	r9, r9, #1
 800292a:	d505      	bpl.n	8002938 <_fwalk_reent+0x24>
 800292c:	6824      	ldr	r4, [r4, #0]
 800292e:	2c00      	cmp	r4, #0
 8002930:	d1f7      	bne.n	8002922 <_fwalk_reent+0xe>
 8002932:	4638      	mov	r0, r7
 8002934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002938:	89ab      	ldrh	r3, [r5, #12]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d907      	bls.n	800294e <_fwalk_reent+0x3a>
 800293e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002942:	3301      	adds	r3, #1
 8002944:	d003      	beq.n	800294e <_fwalk_reent+0x3a>
 8002946:	4629      	mov	r1, r5
 8002948:	4630      	mov	r0, r6
 800294a:	47c0      	blx	r8
 800294c:	4307      	orrs	r7, r0
 800294e:	3568      	adds	r5, #104	; 0x68
 8002950:	e7e9      	b.n	8002926 <_fwalk_reent+0x12>

08002952 <__retarget_lock_init_recursive>:
 8002952:	4770      	bx	lr

08002954 <__retarget_lock_acquire_recursive>:
 8002954:	4770      	bx	lr

08002956 <__retarget_lock_release_recursive>:
 8002956:	4770      	bx	lr

08002958 <__swhatbuf_r>:
 8002958:	b570      	push	{r4, r5, r6, lr}
 800295a:	460e      	mov	r6, r1
 800295c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002960:	2900      	cmp	r1, #0
 8002962:	b096      	sub	sp, #88	; 0x58
 8002964:	4614      	mov	r4, r2
 8002966:	461d      	mov	r5, r3
 8002968:	da08      	bge.n	800297c <__swhatbuf_r+0x24>
 800296a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	602a      	str	r2, [r5, #0]
 8002972:	061a      	lsls	r2, r3, #24
 8002974:	d410      	bmi.n	8002998 <__swhatbuf_r+0x40>
 8002976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297a:	e00e      	b.n	800299a <__swhatbuf_r+0x42>
 800297c:	466a      	mov	r2, sp
 800297e:	f000 f907 	bl	8002b90 <_fstat_r>
 8002982:	2800      	cmp	r0, #0
 8002984:	dbf1      	blt.n	800296a <__swhatbuf_r+0x12>
 8002986:	9a01      	ldr	r2, [sp, #4]
 8002988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800298c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002990:	425a      	negs	r2, r3
 8002992:	415a      	adcs	r2, r3
 8002994:	602a      	str	r2, [r5, #0]
 8002996:	e7ee      	b.n	8002976 <__swhatbuf_r+0x1e>
 8002998:	2340      	movs	r3, #64	; 0x40
 800299a:	2000      	movs	r0, #0
 800299c:	6023      	str	r3, [r4, #0]
 800299e:	b016      	add	sp, #88	; 0x58
 80029a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080029a4 <__smakebuf_r>:
 80029a4:	898b      	ldrh	r3, [r1, #12]
 80029a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029a8:	079d      	lsls	r5, r3, #30
 80029aa:	4606      	mov	r6, r0
 80029ac:	460c      	mov	r4, r1
 80029ae:	d507      	bpl.n	80029c0 <__smakebuf_r+0x1c>
 80029b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029b4:	6023      	str	r3, [r4, #0]
 80029b6:	6123      	str	r3, [r4, #16]
 80029b8:	2301      	movs	r3, #1
 80029ba:	6163      	str	r3, [r4, #20]
 80029bc:	b002      	add	sp, #8
 80029be:	bd70      	pop	{r4, r5, r6, pc}
 80029c0:	ab01      	add	r3, sp, #4
 80029c2:	466a      	mov	r2, sp
 80029c4:	f7ff ffc8 	bl	8002958 <__swhatbuf_r>
 80029c8:	9900      	ldr	r1, [sp, #0]
 80029ca:	4605      	mov	r5, r0
 80029cc:	4630      	mov	r0, r6
 80029ce:	f7ff f9cf 	bl	8001d70 <_malloc_r>
 80029d2:	b948      	cbnz	r0, 80029e8 <__smakebuf_r+0x44>
 80029d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029d8:	059a      	lsls	r2, r3, #22
 80029da:	d4ef      	bmi.n	80029bc <__smakebuf_r+0x18>
 80029dc:	f023 0303 	bic.w	r3, r3, #3
 80029e0:	f043 0302 	orr.w	r3, r3, #2
 80029e4:	81a3      	strh	r3, [r4, #12]
 80029e6:	e7e3      	b.n	80029b0 <__smakebuf_r+0xc>
 80029e8:	4b0d      	ldr	r3, [pc, #52]	; (8002a20 <__smakebuf_r+0x7c>)
 80029ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80029ec:	89a3      	ldrh	r3, [r4, #12]
 80029ee:	6020      	str	r0, [r4, #0]
 80029f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029f4:	81a3      	strh	r3, [r4, #12]
 80029f6:	9b00      	ldr	r3, [sp, #0]
 80029f8:	6163      	str	r3, [r4, #20]
 80029fa:	9b01      	ldr	r3, [sp, #4]
 80029fc:	6120      	str	r0, [r4, #16]
 80029fe:	b15b      	cbz	r3, 8002a18 <__smakebuf_r+0x74>
 8002a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a04:	4630      	mov	r0, r6
 8002a06:	f000 f8d5 	bl	8002bb4 <_isatty_r>
 8002a0a:	b128      	cbz	r0, 8002a18 <__smakebuf_r+0x74>
 8002a0c:	89a3      	ldrh	r3, [r4, #12]
 8002a0e:	f023 0303 	bic.w	r3, r3, #3
 8002a12:	f043 0301 	orr.w	r3, r3, #1
 8002a16:	81a3      	strh	r3, [r4, #12]
 8002a18:	89a0      	ldrh	r0, [r4, #12]
 8002a1a:	4305      	orrs	r5, r0
 8002a1c:	81a5      	strh	r5, [r4, #12]
 8002a1e:	e7cd      	b.n	80029bc <__smakebuf_r+0x18>
 8002a20:	080027b1 	.word	0x080027b1

08002a24 <__malloc_lock>:
 8002a24:	4801      	ldr	r0, [pc, #4]	; (8002a2c <__malloc_lock+0x8>)
 8002a26:	f7ff bf95 	b.w	8002954 <__retarget_lock_acquire_recursive>
 8002a2a:	bf00      	nop
 8002a2c:	200000a0 	.word	0x200000a0

08002a30 <__malloc_unlock>:
 8002a30:	4801      	ldr	r0, [pc, #4]	; (8002a38 <__malloc_unlock+0x8>)
 8002a32:	f7ff bf90 	b.w	8002956 <__retarget_lock_release_recursive>
 8002a36:	bf00      	nop
 8002a38:	200000a0 	.word	0x200000a0

08002a3c <_raise_r>:
 8002a3c:	291f      	cmp	r1, #31
 8002a3e:	b538      	push	{r3, r4, r5, lr}
 8002a40:	4604      	mov	r4, r0
 8002a42:	460d      	mov	r5, r1
 8002a44:	d904      	bls.n	8002a50 <_raise_r+0x14>
 8002a46:	2316      	movs	r3, #22
 8002a48:	6003      	str	r3, [r0, #0]
 8002a4a:	f04f 30ff 	mov.w	r0, #4294967295
 8002a4e:	bd38      	pop	{r3, r4, r5, pc}
 8002a50:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002a52:	b112      	cbz	r2, 8002a5a <_raise_r+0x1e>
 8002a54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002a58:	b94b      	cbnz	r3, 8002a6e <_raise_r+0x32>
 8002a5a:	4620      	mov	r0, r4
 8002a5c:	f000 f830 	bl	8002ac0 <_getpid_r>
 8002a60:	462a      	mov	r2, r5
 8002a62:	4601      	mov	r1, r0
 8002a64:	4620      	mov	r0, r4
 8002a66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a6a:	f000 b817 	b.w	8002a9c <_kill_r>
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d00a      	beq.n	8002a88 <_raise_r+0x4c>
 8002a72:	1c59      	adds	r1, r3, #1
 8002a74:	d103      	bne.n	8002a7e <_raise_r+0x42>
 8002a76:	2316      	movs	r3, #22
 8002a78:	6003      	str	r3, [r0, #0]
 8002a7a:	2001      	movs	r0, #1
 8002a7c:	e7e7      	b.n	8002a4e <_raise_r+0x12>
 8002a7e:	2400      	movs	r4, #0
 8002a80:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002a84:	4628      	mov	r0, r5
 8002a86:	4798      	blx	r3
 8002a88:	2000      	movs	r0, #0
 8002a8a:	e7e0      	b.n	8002a4e <_raise_r+0x12>

08002a8c <raise>:
 8002a8c:	4b02      	ldr	r3, [pc, #8]	; (8002a98 <raise+0xc>)
 8002a8e:	4601      	mov	r1, r0
 8002a90:	6818      	ldr	r0, [r3, #0]
 8002a92:	f7ff bfd3 	b.w	8002a3c <_raise_r>
 8002a96:	bf00      	nop
 8002a98:	2000000c 	.word	0x2000000c

08002a9c <_kill_r>:
 8002a9c:	b538      	push	{r3, r4, r5, lr}
 8002a9e:	4d07      	ldr	r5, [pc, #28]	; (8002abc <_kill_r+0x20>)
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4604      	mov	r4, r0
 8002aa4:	4608      	mov	r0, r1
 8002aa6:	4611      	mov	r1, r2
 8002aa8:	602b      	str	r3, [r5, #0]
 8002aaa:	f7fd ff45 	bl	8000938 <_kill>
 8002aae:	1c43      	adds	r3, r0, #1
 8002ab0:	d102      	bne.n	8002ab8 <_kill_r+0x1c>
 8002ab2:	682b      	ldr	r3, [r5, #0]
 8002ab4:	b103      	cbz	r3, 8002ab8 <_kill_r+0x1c>
 8002ab6:	6023      	str	r3, [r4, #0]
 8002ab8:	bd38      	pop	{r3, r4, r5, pc}
 8002aba:	bf00      	nop
 8002abc:	2000009c 	.word	0x2000009c

08002ac0 <_getpid_r>:
 8002ac0:	f7fd bf32 	b.w	8000928 <_getpid>

08002ac4 <__sread>:
 8002ac4:	b510      	push	{r4, lr}
 8002ac6:	460c      	mov	r4, r1
 8002ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002acc:	f000 f894 	bl	8002bf8 <_read_r>
 8002ad0:	2800      	cmp	r0, #0
 8002ad2:	bfab      	itete	ge
 8002ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8002ad8:	181b      	addge	r3, r3, r0
 8002ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002ade:	bfac      	ite	ge
 8002ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8002ae2:	81a3      	strhlt	r3, [r4, #12]
 8002ae4:	bd10      	pop	{r4, pc}

08002ae6 <__swrite>:
 8002ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002aea:	461f      	mov	r7, r3
 8002aec:	898b      	ldrh	r3, [r1, #12]
 8002aee:	05db      	lsls	r3, r3, #23
 8002af0:	4605      	mov	r5, r0
 8002af2:	460c      	mov	r4, r1
 8002af4:	4616      	mov	r6, r2
 8002af6:	d505      	bpl.n	8002b04 <__swrite+0x1e>
 8002af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002afc:	2302      	movs	r3, #2
 8002afe:	2200      	movs	r2, #0
 8002b00:	f000 f868 	bl	8002bd4 <_lseek_r>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b0e:	81a3      	strh	r3, [r4, #12]
 8002b10:	4632      	mov	r2, r6
 8002b12:	463b      	mov	r3, r7
 8002b14:	4628      	mov	r0, r5
 8002b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b1a:	f000 b817 	b.w	8002b4c <_write_r>

08002b1e <__sseek>:
 8002b1e:	b510      	push	{r4, lr}
 8002b20:	460c      	mov	r4, r1
 8002b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b26:	f000 f855 	bl	8002bd4 <_lseek_r>
 8002b2a:	1c43      	adds	r3, r0, #1
 8002b2c:	89a3      	ldrh	r3, [r4, #12]
 8002b2e:	bf15      	itete	ne
 8002b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8002b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002b3a:	81a3      	strheq	r3, [r4, #12]
 8002b3c:	bf18      	it	ne
 8002b3e:	81a3      	strhne	r3, [r4, #12]
 8002b40:	bd10      	pop	{r4, pc}

08002b42 <__sclose>:
 8002b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002b46:	f000 b813 	b.w	8002b70 <_close_r>
	...

08002b4c <_write_r>:
 8002b4c:	b538      	push	{r3, r4, r5, lr}
 8002b4e:	4d07      	ldr	r5, [pc, #28]	; (8002b6c <_write_r+0x20>)
 8002b50:	4604      	mov	r4, r0
 8002b52:	4608      	mov	r0, r1
 8002b54:	4611      	mov	r1, r2
 8002b56:	2200      	movs	r2, #0
 8002b58:	602a      	str	r2, [r5, #0]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7fd ff23 	bl	80009a6 <_write>
 8002b60:	1c43      	adds	r3, r0, #1
 8002b62:	d102      	bne.n	8002b6a <_write_r+0x1e>
 8002b64:	682b      	ldr	r3, [r5, #0]
 8002b66:	b103      	cbz	r3, 8002b6a <_write_r+0x1e>
 8002b68:	6023      	str	r3, [r4, #0]
 8002b6a:	bd38      	pop	{r3, r4, r5, pc}
 8002b6c:	2000009c 	.word	0x2000009c

08002b70 <_close_r>:
 8002b70:	b538      	push	{r3, r4, r5, lr}
 8002b72:	4d06      	ldr	r5, [pc, #24]	; (8002b8c <_close_r+0x1c>)
 8002b74:	2300      	movs	r3, #0
 8002b76:	4604      	mov	r4, r0
 8002b78:	4608      	mov	r0, r1
 8002b7a:	602b      	str	r3, [r5, #0]
 8002b7c:	f7fd ff2f 	bl	80009de <_close>
 8002b80:	1c43      	adds	r3, r0, #1
 8002b82:	d102      	bne.n	8002b8a <_close_r+0x1a>
 8002b84:	682b      	ldr	r3, [r5, #0]
 8002b86:	b103      	cbz	r3, 8002b8a <_close_r+0x1a>
 8002b88:	6023      	str	r3, [r4, #0]
 8002b8a:	bd38      	pop	{r3, r4, r5, pc}
 8002b8c:	2000009c 	.word	0x2000009c

08002b90 <_fstat_r>:
 8002b90:	b538      	push	{r3, r4, r5, lr}
 8002b92:	4d07      	ldr	r5, [pc, #28]	; (8002bb0 <_fstat_r+0x20>)
 8002b94:	2300      	movs	r3, #0
 8002b96:	4604      	mov	r4, r0
 8002b98:	4608      	mov	r0, r1
 8002b9a:	4611      	mov	r1, r2
 8002b9c:	602b      	str	r3, [r5, #0]
 8002b9e:	f7fd ff2a 	bl	80009f6 <_fstat>
 8002ba2:	1c43      	adds	r3, r0, #1
 8002ba4:	d102      	bne.n	8002bac <_fstat_r+0x1c>
 8002ba6:	682b      	ldr	r3, [r5, #0]
 8002ba8:	b103      	cbz	r3, 8002bac <_fstat_r+0x1c>
 8002baa:	6023      	str	r3, [r4, #0]
 8002bac:	bd38      	pop	{r3, r4, r5, pc}
 8002bae:	bf00      	nop
 8002bb0:	2000009c 	.word	0x2000009c

08002bb4 <_isatty_r>:
 8002bb4:	b538      	push	{r3, r4, r5, lr}
 8002bb6:	4d06      	ldr	r5, [pc, #24]	; (8002bd0 <_isatty_r+0x1c>)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	4604      	mov	r4, r0
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	602b      	str	r3, [r5, #0]
 8002bc0:	f7fd ff29 	bl	8000a16 <_isatty>
 8002bc4:	1c43      	adds	r3, r0, #1
 8002bc6:	d102      	bne.n	8002bce <_isatty_r+0x1a>
 8002bc8:	682b      	ldr	r3, [r5, #0]
 8002bca:	b103      	cbz	r3, 8002bce <_isatty_r+0x1a>
 8002bcc:	6023      	str	r3, [r4, #0]
 8002bce:	bd38      	pop	{r3, r4, r5, pc}
 8002bd0:	2000009c 	.word	0x2000009c

08002bd4 <_lseek_r>:
 8002bd4:	b538      	push	{r3, r4, r5, lr}
 8002bd6:	4d07      	ldr	r5, [pc, #28]	; (8002bf4 <_lseek_r+0x20>)
 8002bd8:	4604      	mov	r4, r0
 8002bda:	4608      	mov	r0, r1
 8002bdc:	4611      	mov	r1, r2
 8002bde:	2200      	movs	r2, #0
 8002be0:	602a      	str	r2, [r5, #0]
 8002be2:	461a      	mov	r2, r3
 8002be4:	f7fd ff22 	bl	8000a2c <_lseek>
 8002be8:	1c43      	adds	r3, r0, #1
 8002bea:	d102      	bne.n	8002bf2 <_lseek_r+0x1e>
 8002bec:	682b      	ldr	r3, [r5, #0]
 8002bee:	b103      	cbz	r3, 8002bf2 <_lseek_r+0x1e>
 8002bf0:	6023      	str	r3, [r4, #0]
 8002bf2:	bd38      	pop	{r3, r4, r5, pc}
 8002bf4:	2000009c 	.word	0x2000009c

08002bf8 <_read_r>:
 8002bf8:	b538      	push	{r3, r4, r5, lr}
 8002bfa:	4d07      	ldr	r5, [pc, #28]	; (8002c18 <_read_r+0x20>)
 8002bfc:	4604      	mov	r4, r0
 8002bfe:	4608      	mov	r0, r1
 8002c00:	4611      	mov	r1, r2
 8002c02:	2200      	movs	r2, #0
 8002c04:	602a      	str	r2, [r5, #0]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f7fd feb0 	bl	800096c <_read>
 8002c0c:	1c43      	adds	r3, r0, #1
 8002c0e:	d102      	bne.n	8002c16 <_read_r+0x1e>
 8002c10:	682b      	ldr	r3, [r5, #0]
 8002c12:	b103      	cbz	r3, 8002c16 <_read_r+0x1e>
 8002c14:	6023      	str	r3, [r4, #0]
 8002c16:	bd38      	pop	{r3, r4, r5, pc}
 8002c18:	2000009c 	.word	0x2000009c

08002c1c <_gettimeofday>:
 8002c1c:	4b02      	ldr	r3, [pc, #8]	; (8002c28 <_gettimeofday+0xc>)
 8002c1e:	2258      	movs	r2, #88	; 0x58
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f04f 30ff 	mov.w	r0, #4294967295
 8002c26:	4770      	bx	lr
 8002c28:	2000009c 	.word	0x2000009c

08002c2c <_init>:
 8002c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c2e:	bf00      	nop
 8002c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c32:	bc08      	pop	{r3}
 8002c34:	469e      	mov	lr, r3
 8002c36:	4770      	bx	lr

08002c38 <_fini>:
 8002c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c3a:	bf00      	nop
 8002c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c3e:	bc08      	pop	{r3}
 8002c40:	469e      	mov	lr, r3
 8002c42:	4770      	bx	lr
